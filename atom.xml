<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tragic Master&#39;s Blog</title>
  
  
  <link href="https://jerry20000730.github.io/atom.xml" rel="self"/>
  
  <link href="https://jerry20000730.github.io/"/>
  <updated>2025-04-13T15:10:25.306Z</updated>
  <id>https://jerry20000730.github.io/</id>
  
  <author>
    <name>Tragic Master</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go Programming Languages - 框架篇 - 日志 - Zap</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_framework_log2/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_framework_log2/</id>
    <published>2025-03-29T15:42:48.092Z</published>
    <updated>2025-04-13T15:10:25.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zap">Zap</h1><p>zap是uber开发的一个日志框架，相较于logrus来说，性能要好一些，公司内部也会用zap来进行日志的格式规范。</p><h1 id="类型">类型</h1><p>zap内置三种logger，对于<code>NewProduction</code>生产环境中运用的logger，会设置日志级别为info（意味着debugger不会被输出），error及error以上会打印调用堆栈，会上报位置。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logger := zap.NewExample() <span class="comment">// 测试</span></span><br><span class="line">logger := zap.NewDevelopment() <span class="comment">// 开发环境</span></span><br><span class="line">logger, _ := zap.NewProduction()</span><br></pre></td></tr></table></figure><p>zap的性能之所以比较好，很大一部分原因是因为日志里面需要显式地声明数据的类型，比如<code>zap.Int</code>，<code>zap.Namespace</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logger.Debug(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">logger.Info(<span class="string">&quot;hello&quot;</span>, zap.Int(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>))</span><br><span class="line">logger.Error(<span class="string">&quot;hello&quot;</span>, zap.Namespace(<span class="string">&quot;china&quot;</span>), zap.Int(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>))</span><br></pre></td></tr></table></figure><p>一般来说，不需要定制log的，直接使用<code>logger := zap.NewDevelopment()</code>或<code>logger, _ := zap.NewProduction()</code>即可，但如果需要定制部分功能的，需要灵活操作的，则可以使用<code>logger.New()</code>进行定制</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">file, err := os.OpenFile(logFile, os.O_CREATE|os.O_APPEND|os.O_WRONLY, os.ModePerm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">encoderConfig := zap.NewProductionEncoderConfig()</span><br><span class="line">encoderConfig.EncodeTime = zapcore.TimeEncoderOfLayout(<span class="string">&quot;2006-01-02 15:04:05.000&quot;</span>) <span class="comment">// 指定时间格式，不是时间戳</span></span><br><span class="line"><span class="comment">// &#123;&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:1744551191.6673155,&quot;caller&quot;:&quot;io/zap_test.go:13&quot;,&quot;msg&quot;:&quot;hello&quot;,&quot;age&quot;:18&#125;</span></span><br><span class="line"><span class="comment">// ts 换成 time</span></span><br><span class="line">encoderConfig.TimeKey = <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// level的显示样式为大写</span></span><br><span class="line">encoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder</span><br><span class="line"></span><br><span class="line">core := zapcore.NewCore(</span><br><span class="line">    <span class="comment">// zapcore.NewJSONEncoder(encoderConfig)</span></span><br><span class="line">    zapcore.NewConsoleEncoder(encoderConfig),</span><br><span class="line">    zapcore.AddSync(file),</span><br><span class="line">    zapcore.InfoLevel,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logger := zap.New(</span><br><span class="line">    core,</span><br><span class="line">    zap.AddCaller(),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> logger</span><br></pre></td></tr></table></figure><p>也可以使用第三方日志轮询库，如之前提到的<code>rotatelogs</code>或者<code>lumberjack</code>(<imgsrc="https://github.com/natefinch/lumberjack.git"alt="https://github.com/natefinch/lumberjack.git" />)</p><p>zap与logrus一样，可以添加<strong>钩子</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">logger := zap.New(</span><br><span class="line">    core,</span><br><span class="line">    zap.AddCaller(),</span><br><span class="line">    zap.AddStacktrace(zapcore.ErrorLevel),</span><br><span class="line">    zap.Hooks(<span class="function"><span class="keyword">func</span><span class="params">(e zapcore.Entry)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> e.Level &gt;= zapcore.ErrorLevel &#123;</span><br><span class="line">            fmt.Println(e.Message)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上述代码在error级别及以上的日志可以在终端中打印错误的message，比如<code>logger.Error("hello", zap.Namespace("china"), zap.Int("age", 18))</code>则会打印<code>hello</code>。<code>zap.AddStacktrace(zapcore.ErrorLevel)</code>允许在errorlevel及其以上打印调用堆栈</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2025-04-13 23:03:20.000ERRORio/zap_test.go:22hello&#123;&quot;china&quot;: &#123;&quot;age&quot;: 18&#125;&#125;</span><br><span class="line">github.com/Jerry20000730/go-framework/io.TestZap2</span><br><span class="line">/home/guofangcheng/go-framework/io/zap_test.go:22</span><br><span class="line">testing.tRunner</span><br><span class="line">/usr/local/go/src/testing/testing.go:1792</span><br></pre></td></tr></table></figure><p>如果需要公共的field，可以使用<code>logger.With</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logger = logger.With(</span><br><span class="line">    zap.Namespace(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">    zap.String(<span class="string">&quot;T-uuid&quot;</span>, uuid.New().String())</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>打印出来的公共参数：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2025-04-13 23:09:44.954INFOio/zap_test.go:21hello&#123;&quot;system&quot;: &#123;&quot;T-uuid&quot;: &quot;091dfb4e-c6a3-463e-9dd0-67c02521c7ee&quot;, &quot;age&quot;: 18&#125;&#125;</span><br><span class="line">2025-04-13 23:09:44.954ERRORio/zap_test.go:22hello&#123;&quot;system&quot;: &#123;&quot;T-uuid&quot;: &quot;091dfb4e-c6a3-463e-9dd0-67c02521c7ee&quot;, &quot;china&quot;: &#123;&quot;age&quot;: 18&#125;&#125;&#125;</span><br><span class="line">github.com/Jerry20000730/go-framework/io.TestZap2</span><br><span class="line">/home/guofangcheng/go-framework/io/zap_test.go:22</span><br><span class="line">testing.tRunner</span><br><span class="line">/usr/local/go/src/testing/testing.go:1792</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Go常用日志框架 - zap</summary>
    
    
    
    <category term="Programming Languages" scheme="https://jerry20000730.github.io/categories/Programming-Languages/"/>
    
    
    <category term="Go" scheme="https://jerry20000730.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go Programming Languages - 框架篇 - 日志 - Logrus</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_framework_log/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_framework_log/</id>
    <published>2025-03-19T15:36:00.651Z</published>
    <updated>2025-03-29T16:44:59.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志作用">日志作用</h1><ol type="1"><li>定位问题 -这个就不用多说了，平常排查问题用的最多的方法就是看日志</li><li>监控 - 这个没咋用过，留个空</li><li>业务分析 - 统计数据吧，比如有多少请求，多少次I/O请求啥的</li></ol><h1id="日志级别程度由低到高大体上是这个顺序">日志级别(程度由低到高，大体上是这个顺序)</h1><ul><li>DEBUG</li><li>INFO</li><li>WARN</li><li>ERROR</li><li>FATAL</li></ul><h1 id="logrus介绍">Logrus介绍</h1><p><ahref="https://github.com/sirupsen/logrus">https://github.com/sirupsen/logrus</a></p><p>根据github介绍，logrus的定义是</p><blockquote><p>Logrus is a structured logger for Go (golang), completely APIcompatible with the standard library logger.</p></blockquote><p>logrus完全兼容标准的log库，还支持文本、JSON 两种日志输出格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/sirupsen/logrus</span><br></pre></td></tr></table></figure><h2 id="指定输出格式">指定输出格式</h2><p><strong>文本</strong>输出格式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logger.SetFormatter(&amp;logrus.TextFormatter&#123;</span><br><span class="line">    DisableColors: <span class="literal">true</span>, <span class="comment">// 强制不显示颜色</span></span><br><span class="line">    TimestampFormat: <span class="string">&quot;2006-01-02 15:04:05.000&quot;</span>,<span class="comment">// 显示ms</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>JSON</strong>输出格式 <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logger.SetFormatter(&amp;logrus.JSONFormatter&#123;</span><br><span class="line">    TimestampFormat: <span class="string">&quot;2006-01-02 15:04:05.000&quot;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这个包的问题：不会进行日志轮询，即定期进行清理，避免log文件不断大下去</p><p>有一个包叫rotatelogs，但已经不维护了</p><h2 id="rotatelogs介绍">rotatelogs介绍</h2><p><ahref="https://github.com/lestrrat-go/file-rotatelogs">https://github.com/lestrrat-go/file-rotatelogs</a></p><p>根据定义，rotatelogs的作用是</p><blockquote><p>Provide an io.Writer that periodically rotates log files from withinthe application</p></blockquote><p>也就是说在应用程序内定期轮换日志文件</p><p><strong>安装命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/lestrrat-go/file-rotatelogs</span><br></pre></td></tr></table></figure><p>rotatelogs可以指定：</p><ol type="1"><li>日志名格式</li><li>软链接</li><li>每隔多少时间生成一份日志</li><li>最大保存期限</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fout, err := rotatelogs.New(</span><br><span class="line">    logFilePath+<span class="string">&quot;.%Y%m%d%H&quot;</span>,                  <span class="comment">// 指定日志文件的路径和名称，路径不存在的时候会创建</span></span><br><span class="line">    rotatelogs.WithLinkName(logFilePath),     <span class="comment">// 为最新的一份日志创建软链接</span></span><br><span class="line">    rotatelogs.WithRotationTime(<span class="number">1</span>*time.Hour), <span class="comment">// 每隔1小时生成一份新的日志文件</span></span><br><span class="line">    rotatelogs.WithMaxAge(<span class="number">7</span>*<span class="number">24</span>*time.Hour),    <span class="comment">// 只留最近7天的日志，或使用WithRotationCount，表示只保留最近的几份日志</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>设置日志输出方式</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置为日志文件输出</span></span><br><span class="line">logger.SetOutput(fout)</span><br><span class="line"><span class="comment">// 设置为终端输出</span></span><br><span class="line">logger.SetOutput(os.Stdout)</span><br><span class="line"><span class="comment">// 设置为不输出</span></span><br><span class="line">log.SetOutput(ioutil.Discard)</span><br></pre></td></tr></table></figure><p><strong>设置日志调用关系</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.SetReportCaller(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>这样输出的日志就会带上method，比如： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;animal&quot;</span><span class="punctuation">:</span><span class="string">&quot;penguin&quot;</span><span class="punctuation">,</span><span class="attr">&quot;level&quot;</span><span class="punctuation">:</span><span class="string">&quot;fatal&quot;</span><span class="punctuation">,</span><span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;github.com/sirupsen/arcticcreatures.migrate&quot;</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;a penguin swims by&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span><span class="string">&quot;2014-03-10 19:57:38.562543129 -0400 EDT&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p><strong>钩子（Hooks）</strong></p><p>简单来说就是打印日志的时候顺带会执行的操作，比如发短信啦，接入一些平台bot发消息啦</p><p>logrus支持hooks请参考官网：<ahref="https://github.com/sirupsen/logrus/wiki/Hooks">https://github.com/sirupsen/logrus/wiki/Hooks</a></p><p><strong>自定义钩子</strong>实现hook的两个方法，一个是<code>Levels</code>，表示适用于哪些等级，另一个是<code>Fire</code>，表示具体做法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现logurs.Hook接口</span></span><br><span class="line"><span class="keyword">type</span> AppHook <span class="keyword">struct</span> &#123;</span><br><span class="line">AppName <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适用于哪些Level</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *AppHook)</span></span> Levels() []logrus.Level &#123;</span><br><span class="line"><span class="keyword">return</span> []logrus.Level&#123;logrus.ErrorLevel, logrus.FatalLevel, logrus.PanicLevel&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Fire函数时可读取或修改logrus.Entry</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *AppHook)</span></span> Fire(entry *logrus.Entry) <span class="type">error</span> &#123;</span><br><span class="line">entry.Data[<span class="string">&quot;app&quot;</span>] = h.AppName</span><br><span class="line">    <span class="comment">// 这里你可以将Error Fatal 和 Panic级别的错误日志发送到kafka</span></span><br><span class="line">fmt.Println(entry.Message)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中Entry的结构是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Entry <span class="keyword">struct</span> &#123;</span><br><span class="line">Logger *Logger</span><br><span class="line"></span><br><span class="line"><span class="comment">// Contains all the fields set by the user.</span></span><br><span class="line">Data Fields</span><br><span class="line"></span><br><span class="line"><span class="comment">// Time at which the log entry was created</span></span><br><span class="line">Time time.Time</span><br><span class="line"></span><br><span class="line"><span class="comment">// Level the log entry was logged at: Trace, Debug, Info, Warn, Error, Fatal or Panic</span></span><br><span class="line"><span class="comment">// This field will be set on entry firing and the value will be equal to the one in Logger struct field.</span></span><br><span class="line">Level Level</span><br><span class="line"></span><br><span class="line"><span class="comment">// Calling method, with package name</span></span><br><span class="line">Caller *runtime.Frame</span><br><span class="line"></span><br><span class="line"><span class="comment">// Message passed to Trace, Debug, Info, Warn, Error, Fatal or Panic</span></span><br><span class="line">Message <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// When formatter is called in entry.log(), a Buffer may be set to entry</span></span><br><span class="line">Buffer *bytes.Buffer</span><br><span class="line"></span><br><span class="line"><span class="comment">// Contains the context set by the user. Useful for hook processing etc.</span></span><br><span class="line">Context context.Context</span><br><span class="line"></span><br><span class="line"><span class="comment">// err may contain a field formatting error</span></span><br><span class="line">err <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Fields <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>对应生成的日志就是中的话，<code>Message</code>就是<code>msg</code>，<code>Level</code>就是<code>level</code>，实际存储在的是<code>Data</code>变量中</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span><span class="attr">&quot;file&quot;</span><span class="punctuation">:</span><span class="string">&quot;/home/guofangcheng/go-framework/io/logrus_test.go:14&quot;</span><span class="punctuation">,</span><span class="attr">&quot;func&quot;</span><span class="punctuation">:</span><span class="string">&quot;github.com/Jerry20000730/go-framework/io.TestLogrus&quot;</span><span class="punctuation">,</span><span class="attr">&quot;level&quot;</span><span class="punctuation">:</span><span class="string">&quot;info&quot;</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;this is info log&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;test&quot;</span><span class="punctuation">,</span><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span><span class="string">&quot;2025-03-24 01:03:48.080&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>示例代码就是做了个简单的处理，实际可以做更为复杂的逻辑，比如加入kafka，对接到提醒bot等。并且因为修改了<code>Data</code>，所以本质上可以修改他的日志输出内容。</p>]]></content>
    
    
    <summary type="html">Go常用日志框架 - logrus</summary>
    
    
    
    <category term="Programming Languages" scheme="https://jerry20000730.github.io/categories/Programming-Languages/"/>
    
    
    <category term="Go" scheme="https://jerry20000730.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go Programming Languages - Go Module Version</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_module/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_module/</id>
    <published>2025-03-11T15:48:09.849Z</published>
    <updated>2025-03-11T16:13:53.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-module-版本规范">Go Module 版本规范</h1><ol type="1"><li>Go module每个版本以v开头，后面跟_语义版本_。当vcs为git时候，通常情况下模块的版本会是gittag的版本</li></ol><p><imgsrc="/images/ProgrammingLanguages/Go/go_module/module_version.png"alt="go module的版本号" /> <imgsrc="/images/ProgrammingLanguages/Go/go_module/git_version.png"alt="git tag版本" /></p><ol start="2" type="1"><li><p>当没有语义版本的时候，会生成一个伪版本，例如<code>v0.0.0-20190306012644-bacd9c7ef1dd</code>这种，其中第二部分代表代码生成的时间，第三部分是这个代码当前commit的id的前12个字符。（可以通过<code>git log</code>来查看）</p></li><li><p>主版本为2或更高版本的时候，go模块路径必须带有类似于<code>/v2</code>或<code>/v3</code>这样的主版本后缀，比如<code>github.com/gocolly/colly/v2</code>，<code>github.com/mailru/go-clickhouse/v2</code>，这就是为什么<code>go get</code>或<code>go install</code>的时候可以指定版本号，如：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/cespare/xxhash@v1.1.0</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>主版本号不同表示不兼容，一个项目里可能同时依赖不同的主版本号，比如</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;gopkg.in/yaml.v2&quot;</span></span><br><span class="line">    yaml3 <span class="string">&quot;gopkg.in/yaml.v3&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="5" type="1"><li><p><code>go get -u</code>不会更新主版本号，即<code>-u</code>表示更新到当前主版本号下的最新版本</p></li><li><p>在使用gomodule规范之前，有些第三方库的高版本没有加<code>/v2</code>或<code>/v3</code>后缀，此时需要加incompatible，如<code>github/go-redis/redis v6.15.9+incompatible</code>路径没有<code>/v6</code>后缀</p></li><li><p>主版本后缀不允许有<code>/v0</code>或<code>/v1</code>出现</p><ol type="a"><li>一种特殊情况：以<code>gopkg.in/</code>开头的模块路径必须始终具有主版本后缀。后缀必须以点开头，而不是斜杠，例如<code>gopkg.in/check.v1</code>，<code>gopkg.in/yaml.v3</code></li></ol></li></ol>]]></content>
    
    
    <summary type="html">Go版本规范</summary>
    
    
    
    <category term="Programming Languages" scheme="https://jerry20000730.github.io/categories/Programming-Languages/"/>
    
    
    <category term="Go" scheme="https://jerry20000730.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go Programming Languages - Extra Settings</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_extra/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_extra/</id>
    <published>2025-03-08T12:14:25.550Z</published>
    <updated>2025-03-11T15:48:03.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-module">Go module</h1><h2 id="go-module的原理">Go module的原理</h2><p>go module 根据官网定义</p><blockquote><p>A Go module is a collection of Go packages stored in a file tree witha go.mod file at its root</p></blockquote><p>在Go Module没有出现之前，所有依赖距均从<code>$GOPATH/src/</code> 或<code>$GOROOT/src/</code> 中进行查找导入，Go Modules是为了提升使用其他开发者代码，即添加<strong>依赖项（模块、包）</strong>时的体验，也是为了让代码的正确性、安全性得到保障。</p><p>在 Go 支持 Go Modules之后，编译时编译器会从工作目录（当前所在目录）开始并逐级向上查找是否具有go.mod 文件。</p><h2 id="如何开启">如何开启？</h2><p>用环境变量 GO111MODULE开启或关闭模块支持，它有三个可选值：off、on、auto，默认值是 auto。</p><ul><li><code>GO111MODULE=off</code> 无模块支持，Go 会从 GOPATH 和 vendor文件夹寻找包。</li><li><code>GO111MODULE=on</code> 模块支持，Go 会忽略 GOPATH 和 vendor文件夹，只根据 go.mod 下载依赖。</li><li><code>GO111MODULE=auto</code> 在 <code>$GOPATH/src</code>外面且根目录有 go.mod 文件时，开启模块支持。</li></ul><p>注意：在使用模块的时候，GOPATH是无意义的，不过它还是会把下载的依赖储存在 <code>$GOPATH/src/mod</code>中，也会把 go install 的结果放在 <code>$GOPATH/bin</code> 中</p><h2 id="如何初始化一个module">如何初始化一个module</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init $&#123;module_name&#125;</span><br></pre></td></tr></table></figure><h2 id="go-module-名称">Go module 名称</h2><p>module名称有模块路径标识，模块路径就是模块的规范名称，为了规范，很多公司会将确保模块名称加上<code>https://</code>的前缀就是源码仓库的地址。</p><p>举例： <img src="/images/ProgrammingLanguages/Go/go_extra/module.png"alt="module名称与实际github地址相同" /></p><p>这样做的目的是为了方便其他公司/组织的人下载依赖时使用</p><p>注意： 1. 模块名可以不是源码仓库地址 2. 模块名称可以包含子目录</p><p>下面讨论如何下载，已经如果模块名称不为实际下载地址的时候Gomodule是如何解决的。</p><h2 id="如何下载go-module下载自己项目的依赖项">如何下载GoModule（下载自己项目的依赖项）？</h2><p>一般来说，只需要知道你需要下载的module名称即可，比如我需要下载上图testify的包，我只需要：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/stretchr/testify</span><br></pre></td></tr></table></figure><p>但有的时候，一些module的名称与源码仓库地址不一样，比如下图： <imgsrc="/images/ProgrammingLanguages/Go/go_extra/module2.png"alt="module名称与实际github地址不相同" /></p><p>当执行get命令的时候： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get go.uber.org/zap</span><br></pre></td></tr></table></figure></p><p>会先向https://go.uber.org/zap?go-get=1发送一个<code>GET</code>请求<img src="/images/ProgrammingLanguages/Go/go_extra/module3.png"alt="postman显示发送get请求后的响应体" /></p><p>此时，响应体里会有一个meta标签，name为<code>go-import</code>，对应的content由三部分组成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 1. 模块名称</span><br><span class="line"># 2. 版本控制工具（git还是svn）</span><br><span class="line"># 3. 实际的源码仓库地址</span><br><span class="line">go.uber.org/zap git https://github.com/uber-go/zap</span><br></pre></td></tr></table></figure><h2id="如何下载模块中的子模块下载自己项目的依赖项中的其中一个模块">如何下载模块中的子模块（下载自己项目的依赖项中的其中一个模块）？</h2><p>假设我需要的不是<code>zap</code>这个项目的所有源码，而是其中一个模块，比如<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get go.uber.org/zap/tools</span><br></pre></td></tr></table></figure> 他的查找顺序如下： 1.先发送<code>GET</code>请求<code>https://go.uber.org/zap/tools?go-get=1</code>，发现查不到源码地址2. 再回溯一级目录，请求<code>https://go.uber/org/zap?go-get=1</code></p><h2 id="公司里面的做法">公司里面的做法</h2><ol type="1"><li>公司里面一般我们会直接<code>go get xxxx/repo.git</code>，这个时候就会直接克隆这个git地址的目录，无需再发送<code>go-get=1</code>的请求</li><li>一般来说，公司里面实际上会使用ssh的方式解决权限问题，比如使用git的时候我们会在$HOME/.gitconfig文件中追加<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[url &quot;ssh://git@xxx.com&quot;]</span><br><span class="line">    insteadOf = https://xxx.com</span><br></pre></td></tr></table></figure> 通过在git平台上传ssh公钥的方式解决权限问题</li></ol><h1 id="goproxy">GOPROXY</h1><h2 id="goproxy原理">GOPROXY原理</h2><p>几个问题： 1.互联网上的源码仓库除了github还有很多，在各种不同的网络环境下，如何保证下载速度？2. 默认情况下，goget不是直接去源码仓库上下载代码，而是通过代理<code>https://proxy.golang.org</code>(谷歌维护)去下载，代理对源码镜像进行了缓存并提供了CDN加速，但是源码更新几分钟后，代理里的镜像才会更新会有一定延迟。</p><p>国内代理有： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://goproxy.cn</span><br><span class="line">https://goproxy.io</span><br></pre></td></tr></table></figure></p><p>我们可以在GOPROXY环境变量下进行更改，以确保当谷歌的下载不下来的时候，可以使用国内代理下载。</p><h2 id="模块缓存">模块缓存</h2><p>下载的谋爱会保存在环境变量<code>GOMODCACHE</code>指定的目录下，默认为<code>$GOPATH/pkg/mod</code></p><h2 id="gosumdb">GOSUMDB</h2><p>sum.golang.org(由谷歌运行)提供了一个checksum数据库，用来存储源代码的哈希值，以防止goget从任何源头（包括代理）拉取了被篡改的源码。</p><ol type="1"><li>第一次用goget下载某个模块的时候，会计算其哈希值，与checksum数据库里的值进行对比，</li><li>如果一致，则把模块存入本地缓存目录，并将哈希值写入go.sum文件。后续使用该模块时通过go.sum文件来校验该模块自下载以来未曾被修改过。</li><li>如果设置环境变量<code>GOSUMDB=off</code>，或者goget的时候使用-insecure标志，标识不需要验证合法性。</li></ol><h2 id="如何使用公司内部私有的go-module">如何使用公司内部私有的Gomodule</h2><ol type="1"><li>GOPROXY的默认值（<code>https://proxy.golang.org,direct</code>），其中direct表示不走代理，直接从源码库下载（先发送go-get=1请求）</li><li>所有代理都不会访问私有仓库，所以goget私有模块的时候会命中direct，所有代理都不会访问私有仓库，所以goget私有模块的时候会命中direct。为避免下载私有模块的时候访问代理，可以把私有模块的前缀赋给<code>GONOPROXY</code>，如<code>GONOPROXY=xxx.xxx.com</code></li><li>私有模块不需要使用公共的checksum数据库，所以需要设置<code>GONOSUMDB=xxx.xxx.com</code></li><li>GOPRIVATE是<code>GONOPROXY</code>和<code>GONOSUMDB</code>的默认值，所以设置GOPRIVATE之后就不需要再设置<code>GONOPROXY</code>和<code>GONOSUMDB</code></li></ol><h2 id="如何部署公司私有的goproxy">如何部署公司私有的GOPROXY</h2><p><code>goproxy.io</code>除了提供国内可用的gomodule代理之外，还提供了部署私有go proxy的能力：</p><p><ahref="https://github.com/goproxyio/goproxy.git">https://github.com/goproxyio/goproxy.git</a></p><p>方法如下：</p><ol type="1"><li><p>编译安装go proxy <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/goproxyio/goproxy.git</span><br><span class="line">cd goproxy</span><br><span class="line">make</span><br></pre></td></tr></table></figure></p></li><li><p>启动代码 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/goproxy -listen=0.0.0.0:80 -cacheDir=$HOME/go_module_cache -proxy https://goproxy.io -exclude &quot;gitlab.xxx.com&quot;</span><br></pre></td></tr></table></figure></p></li></ol><ul><li>其中 <code>-cacheDir</code>是代理使用的缓存目录，跟GOMODCACHE区分开，如果私有代理商找不到模块，就去访问公开代理（也就是https://goproxy.io）。</li><li><code>-proxy</code>指定公开代理</li><li><code>-exclude</code>指定那些模块直接去代码仓库下载</li><li>最后将自己的GOPROXY设置为<code>GOPROXY=xxx.com,direct</code>，xxx.com就是你服务器的域名，80端口开放</li></ul>]]></content>
    
    
    <summary type="html">Go需要知道的一些配置信息</summary>
    
    
    
    <category term="Programming Languages" scheme="https://jerry20000730.github.io/categories/Programming-Languages/"/>
    
    
    <category term="Go" scheme="https://jerry20000730.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>CICD流水线搭建流程 [GitLab + Ubuntu]</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/CICD/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/CICD/</id>
    <published>2024-10-27T21:51:49.000Z</published>
    <updated>2024-10-27T21:51:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="prerequisite">Prerequisite</h1><ol type="1"><li>GitLab 仓库</li><li>Ubuntu (18.04/20.04/22.04) 服务器</li><li>编程语言runtime</li></ol><h1 id="创建gitlab仓库">1. 创建GitLab仓库</h1><figure><img src="/images/CICD/gitlab-new-project.png"alt="create gitlab repo" /><figcaption aria-hidden="true">create gitlab repo</figcaption></figure><h1 id="创建gitlab-runner">2. 创建GitLab Runner</h1><p>服务器上先安装<code>gitlab-runner</code>服务 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gitlab-runner</span><br></pre></td></tr></table></figure></p><p>检查安装是否成功 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status gitlab-runner</span><br></pre></td></tr></table></figure></p><p>会显示 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">● gitlab-runner.service - GitLab Runner</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/gitlab-runner.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Mon 2020-06-01 09:01:49 UTC; 4s ago</span><br><span class="line"> Main PID: 16653 (gitlab-runner)</span><br><span class="line">    Tasks: 6 (limit: 1152)</span><br><span class="line">   CGroup: /system.slice/gitlab-runner.service</span><br><span class="line">           └─16653 /usr/lib/gitlab-runner/gitlab-runner run --working-directory /home/gitlab-runner --config /etc/gitlab</span><br></pre></td></tr></table></figure></p><p>其次在GitLab上进行绑定，进入仓库 - Settings - CICD - Runners</p><figure><img src="/images/CICD/gitlab-runner.png"alt="gitlab runner location" /><figcaption aria-hidden="true">gitlab runner location</figcaption></figure><p>点击 <code>New Project Runner</code>,然后写一下tag和description（确保你知道这个是那个服务器和干什么的），然后选中<code>Run untagged project</code>，确保你不会因为该项目没有tag而无法在runner上跑</p><figure><img src="/images/CICD/gitlab-runner-configure.png"alt="gitlab runner configure" /><figcaption aria-hidden="true">gitlab runner configure</figcaption></figure><h1 id="绑定gitlab-runner和服务器">3. 绑定gitlab-runner和服务器</h1><p>当 <code>gitlab-runner</code>注册之后，需要在服务器上进行token绑定</p><figure><img src="/images/CICD/new-runner-created.png"alt="gitlab runner binding" /><figcaption aria-hidden="true">gitlab runner binding</figcaption></figure><p>输入基础命令 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-runner register --url [project_URL] --token [runner_token]</span><br></pre></td></tr></table></figure> 然后可能会让你输入几个关键信息</p><ol type="1"><li>executor: 参照gitlab官方给出的<ahref="https://docs.gitlab.com/runner/executors/">executor类型</a>，我们因为是个小项目，暂时没有使用docker，所以选择shell</li><li>docker-image:如果选择docker作为executor的话，就会要求配置docker镜像</li><li>description: 描述一下 等信息，其它我没遇到，遇到了再记录</li></ol><h1 id="编写-.gitlab-ci.yml">4. 编写 <code>.gitlab-ci.yml</code></h1><p>首先是要填写流水线的阶段 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure></p><p>其次是各阶段所需要的命令和生成的文件单独列举出来，因为我们这个是个springboot项目，每次推送main分支之后就会进行maven编译，生成target文件夹下的jar包，然后在javaruntime运行，流水线思路简单。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">clean</span> <span class="string">package</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">target/*.jar</span></span><br><span class="line">    <span class="attr">expire_in:</span> <span class="number">1</span> <span class="string">week</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">$DEPLOY_PATH</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cp</span> <span class="string">target/$APP_NAME</span> <span class="string">$DEPLOY_PATH/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">      while pgrep -f &quot;$APP_NAME&quot; &gt; /dev/null; do</span></span><br><span class="line"><span class="string">        pkill -f &quot;$APP_NAME&quot;</span></span><br><span class="line"><span class="string">        sleep 1</span></span><br><span class="line"><span class="string">      done</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="string">nohup</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">$DEPLOY_PATH/$APP_NAME</span> <span class="string">--spring.profiles.active=prod</span> <span class="string">&gt;</span> <span class="string">$DEPLOY_PATH/app.log</span> <span class="number">2</span><span class="string">&gt;&amp;1</span> <span class="string">&amp;</span></span><br></pre></td></tr></table></figure><p>其中 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">  while pgrep -f &quot;$APP_NAME&quot; &gt; /dev/null; do</span></span><br><span class="line"><span class="string">    pkill -f &quot;$APP_NAME&quot;</span></span><br><span class="line"><span class="string">    sleep 1</span></span><br><span class="line"><span class="string">  done</span></span><br><span class="line"><span class="string"></span><span class="bullet">-</span> <span class="string">nohup</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">$DEPLOY_PATH/$APP_NAME</span> <span class="string">--spring.profiles.active=prod</span> <span class="string">&gt;</span> <span class="string">$DEPLOY_PATH/app.log</span> <span class="number">2</span><span class="string">&gt;&amp;1</span> <span class="string">&amp;</span></span><br></pre></td></tr></table></figure> 是为了保证能够确保关掉上一次跑的进程。</p><h1 id="reference">Reference</h1><ol type="1"><li>How To Set Up a Continuous Deployment Pipeline with GitLab CI/CD onUbuntu <ahref="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-continuous-deployment-pipeline-with-gitlab-on-ubuntu">https://www.digitalocean.com/community/tutorials/how-to-set-up-a-continuous-deployment-pipeline-with-gitlab-on-ubuntu</a></li><li>Use CI/CD to build your application <ahref="https://docs.gitlab.com/ee/topics/build_your_application.html">https://docs.gitlab.com/ee/topics/build_your_application.html</a></li></ol>]]></content>
    
    
    <summary type="html">记录一下在ubuntu服务器上搭建CICD (未使用Docker)</summary>
    
    
    
    <category term="环境配置" scheme="https://jerry20000730.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="CICD" scheme="https://jerry20000730.github.io/tags/CICD/"/>
    
  </entry>
  
  <entry>
    <title>部署SSL证书</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/SSLBuild/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/SSLBuild/</id>
    <published>2024-10-27T07:00:47.000Z</published>
    <updated>2024-10-27T07:00:47.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#prerequisite">Prerequisite</a></li><li><a href="#------------">申请免费证书 (腾讯云)</a></li><li><a href="#--ssl---nginx-">安装SSL证书（Nginx）</a><ul><li><a href="#--ssl--">下载SSL文件</a></li><li><a href="#-------">登录远程服务器</a></li></ul></li><li><a href="#reference">Reference</a></li></ul><!-- tocstop --><h1 id="prerequisite">Prerequisite</h1><ol type="1"><li>一个域名</li><li>Nginx服务器</li></ol><h1 id="申请免费证书-腾讯云">申请免费证书 (腾讯云)</h1><ol type="1"><li>登录 <a href="https://console.cloud.tencent.com/ssl">SSL证书控制台</a>，进入<strong>我的证书</strong>页面，并单击<strong>申请免费证书</strong>。</li><li>填写证书申请表单，如下图所示： <imgsrc="/images/SSL/free_certificate.png"alt="apply for free certificate at Tencent Cloud" /> 其中：</li></ol><ul><li>证书绑定域名：网站域名</li><li>域名验证方式：一般选手动就可以，然后到域名解析商配置一下，因为本人是腾讯云买的，就比较方便，只需要到<ahref="https://console.cloud.tencent.com/cns/domains">https://console.cloud.tencent.com/cns/domains</a><ul><li>详情参考：<ahref="https://cloud.tencent.com/document/product/400/54500">https://cloud.tencent.com/document/product/400/54500</a></li></ul></li><li>申请邮箱：请输入您的邮箱地址。</li><li>算法选择：RSA就行</li></ul><h1 id="安装ssl证书nginx">安装SSL证书（Nginx）</h1><p>以下针对于使用Nginx进行反向代理部署的服务器</p><h2 id="下载ssl文件">下载SSL文件</h2><p>等待审核通过之后，点击下载按钮并获取SSL证书 <imgsrc="/images/SSL/download_button.png" alt="click download" />依据不同云服务器商要求下载对应版本（我下的是Nginx版本） <imgsrc="/images/SSL/download_version.png"alt="choose SSL download version" /></p><p><strong>文件夹中会含有以下几个文件：</strong></p><p><strong>证书文件</strong>：xxx.crt 证书文件</p><p><strong>密钥文件</strong>：xxx.key 私钥文件</p><p><strong>CSR文件</strong>：xxx.csr 文件</p><p><strong>PEM文件</strong>: xxx.pem 文件</p><p>我们只需要<code>.crt</code>和<code>.key</code>文件即可</p><h2 id="登录远程服务器">登录远程服务器</h2><p>WinSCP/PuTTY/我喜欢用Termius</p><ol type="1"><li><p>将已获取到的 cloud.tencent.com_bundle.crt 证书文件和cloud.tencent.com.key 私钥文件从本地目录拷贝到轻量应用服务器 Nginx默认配置文件目录中</p></li><li><p>输入grep命令获取nginx配置目录（知道的略过这步）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / | grep nginx.conf</span><br></pre></td></tr></table></figure></p></li><li><p>然后去配置文件<code>nginx.conf</code>或者<code>site-enabled/default</code>(我是后者)配置文件增加下列行数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl default_server;</span><br><span class="line">    listen [::]:443 ssl default_server;</span><br><span class="line">    ssl_certificate cert/tragicmaster.website_bundle.crt;</span><br><span class="line">    ssl_certificate_key cert/tragicmaster.website.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>保存并使用以下命令检测nginx配置是否正确 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure> 如果返回<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure> 然后重新加载nginx (非常重要！不然换证书的时候容易检测不到)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></p></li><li><p>登录域名https://tragicmaster.website左上角成功变锁！</p></li></ol><h1 id="reference">Reference</h1><ol type="1"><li>Nginx服务器证书安装 <ahref="https://cloud.tencent.com/document/product/1207/47027">https://cloud.tencent.com/document/product/1207/47027</a></li><li>linux下查看nginx的安装路径 <ahref="https://blog.csdn.net/sinat_22387459/article/details/115007510">https://blog.csdn.net/sinat_22387459/article/details/115007510</a></li><li>Nginx 安装 SSL 配置 HTTPS超详细完整全过程 <ahref="https://developer.aliyun.com/article/761236">https://developer.aliyun.com/article/761236</a></li></ol>]]></content>
    
    
    <summary type="html">记录一下SSL证书配置（SSL Certificate Deployment）</summary>
    
    
    
    <category term="环境配置" scheme="https://jerry20000730.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="SSL" scheme="https://jerry20000730.github.io/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>最长回文子串问题的解法</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/longest-palindrome/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/longest-palindrome/</id>
    <published>2024-10-22T05:19:22.000Z</published>
    <updated>2024-10-22T05:19:22.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#----">问题分析</a></li><li><a href="#----">判断方法</a></li><li><a href="#------">中心拓展方法</a></li><li><a href="#--------">二维动态规划方法</a></li></ul><!-- tocstop --><h2 id="问题分析">问题分析</h2><p>力扣链接：<ahref="https://leetcode.cn/problems/longest-palindromic-substring/description">https://leetcode.cn/problems/longest-palindromic-substring/description</a></p><p>给你一个字符串<code>s</code>，找到<code>s</code>种最长的回文子串 例如<code>s = "babbad"</code> 的最长回文子串是<code>abba</code>，长度为4</p><h2 id="判断方法">判断方法</h2><p>从两边向中间，或者中间向两边拓展，不断比较头尾字符是否相同即可</p><h2 id="中心拓展方法">中心拓展方法</h2><p>思路：遍历每一个字符，向两百年拓展找到一起为中心的最长回文子串，所有找到的回文子串的最大长度即所求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        longest = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="comment"># odd</span></span><br><span class="line">            p = self.getPalindrome(s, i, i)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(p) &gt; <span class="built_in">len</span>(longest):</span><br><span class="line">                longest = p</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># even</span></span><br><span class="line">            p = self.getPalindrome(s, i, i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(p) &gt; <span class="built_in">len</span>(longest):</span><br><span class="line">                longest = p</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> longest</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span>, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">            left -= <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> s[left+<span class="number">1</span>:right]</span><br></pre></td></tr></table></figure><h2 id="二维动态规划方法">二维动态规划方法</h2><p>回文串两边加上两个相同字符，会变成一个新的回文串，建立二维数组dp，找出所有的回文子串，<code>dp[i][j]</code>记录子串i到j是否为回文串</p><ol type="1"><li>初始化dp数组，所有一个字母都是回文串，所以<code>dp[i][i] = True</code></li><li>得出递推关系：<ul><li>如果<code>s[i]</code>和<code>s[j]</code>相等，并且子串<code>dp[i+1][j-1] = True</code>，那么<code>dp[i][j]</code>也为true</li><li>不相等，直接False</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestPalindrome</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        memo = [[<span class="literal">None</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        max_length = <span class="number">1</span></span><br><span class="line">        longest_start = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dp</span>(<span class="params">i, j</span>):</span><br><span class="line">            <span class="keyword">nonlocal</span> max_length, longest_start, memo</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> memo[i][j] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> memo[i][j]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> s[i] == s[j] <span class="keyword">and</span> dp(i+<span class="number">1</span>, j-<span class="number">1</span>):</span><br><span class="line">                memo[i][j] = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">if</span> j-i+<span class="number">1</span> &gt; max_length:</span><br><span class="line">                    max_length = j-i+<span class="number">1</span></span><br><span class="line">                    longest_start = i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                memo[i][j] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> memo[i][j]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):</span><br><span class="line">                dp(i, j)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> s[longest_start:longest_start+max_length]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文记录最长回文子串问题的几种解决方法</summary>
    
    
    
    <category term="Algorithm" scheme="https://jerry20000730.github.io/categories/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://jerry20000730.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Go Programming Languages - Goroutines</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_goroutine/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_goroutine/</id>
    <published>2024-09-03T13:21:01.000Z</published>
    <updated>2024-09-03T13:21:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="how-to-write-goroutine">How to write Goroutine</h2><p>任何函数只需加上<code>go</code>就能送给调度器运行，不需要像python,js一样区分是否为异步函数。</p><p>Very basic Goroutine usage: <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                fmt.Printf(<span class="string">&quot;hello from goroutine %d\n&quot;</span>, i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意 不能这么写 <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                fmt.Printf(<span class="string">&quot;hello from goroutine %d\n&quot;</span>, i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(time.Millisecond)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 因为循环变量并不支持被延迟/动态计算</p><h2 id="what-is-co-routine-协程">What is Co-routine (协程)</h2><ul><li>lightweight thread (轻量级线程)</li><li>编译器/解释器/虚拟机层面的多任务</li><li>多个协程可能在一个或多个线程上运行</li><li>子程序（Subroutines）是协程的特例，协程更加广泛</li></ul><h2 id="goroutine可能得切换点">Goroutine可能得切换点</h2><ul><li>I/O, select</li><li>channel</li><li>等待锁</li><li><code>runtime.Gosched()</code></li></ul>]]></content>
    
    
    <summary type="html">A goroutine is a lightweight thread managed by Go runtime</summary>
    
    
    
    <category term="Programming Languages" scheme="https://jerry20000730.github.io/categories/Programming-Languages/"/>
    
    
    <category term="Go" scheme="https://jerry20000730.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go Programming Languages - Functional Programming</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_lambda/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_lambda/</id>
    <published>2024-09-03T12:46:13.000Z</published>
    <updated>2024-09-03T12:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="functional-programming-in-go-closure-闭包">FunctionalProgramming in GO: Closure (闭包)</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        sum += v</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := adder()</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;0 + 1 + ... + %d = %d\n&quot;</span>, i, a(i))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>闭包与Python类似，里面有函数体，函数体里有局部变量和自由变量（e.g.,<code>sum</code>）。</p><p>对应的Python闭包方式 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">adder</span>():</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">value</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> <span class="built_in">sum</span></span><br><span class="line">        <span class="built_in">sum</span> += value</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure>其中<code>nonlocal</code>就是标准，表示该变量不是局部变量</p><h2 id="缺点">缺点</h2><p>但是 Go中的函数式编程因为不像Python一样不用限制类型（泛型的缺失，ducktyping），就会导致后续代码会很难维护</p><p>比如 <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> list = []<span class="type">string</span>&#123;<span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Grape&quot;</span>&#125;</span><br><span class="line">    <span class="comment">// we are passing the array and a function as arguments to mapForEach method.</span></span><br><span class="line">    <span class="keyword">var</span> out = mapForEach(list, <span class="function"><span class="keyword">func</span><span class="params">(it <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(it)</span><br><span class="line">    &#125;)</span><br><span class="line">    fmt.Println(out) <span class="comment">// [6, 5, 6, 5]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The higher-order-function takes an array and a function as arguments</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapForEach</span><span class="params">(arr []<span class="type">string</span>, fn <span class="keyword">func</span>(it <span class="type">string</span>)</span></span> <span class="type">int</span>) []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> newArray = []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, it := <span class="keyword">range</span> arr &#123;</span><br><span class="line">    <span class="comment">// We are executing the method passed</span></span><br><span class="line">    newArray = <span class="built_in">append</span>(newArray, fn(it))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArray</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果想包装一下，给别人用，那就得用泛型了，不然别人要是想用<code>map[int]</code>，那不就得开发一个<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapInt64ForEach</span><span class="params">(arr []<span class="type">int64</span>, fn <span class="keyword">func</span>(it <span class="type">int64</span>)</span></span> <span class="type">int</span>) []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> newArray = []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, it := <span class="keyword">range</span> arr &#123;</span><br><span class="line">    <span class="comment">// We are executing the method passed</span></span><br><span class="line">    newArray = <span class="built_in">append</span>(newArray, fn(it))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArray</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="采用高阶函数的递归">采用高阶函数的递归</h2><p>借用 fibonacci 的实现我们简单地示例返回一个函数的方式来实现递归：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    a, b := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f := fibonacci()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Println(f())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依次输出：1 1 2 3 5 8 13 21 34 55</span></span><br></pre></td></tr></table></figure></p><h2 id="延迟计算-delayed-calculating">延迟计算 Delayed Calculating</h2><p>使用高阶/匿名函数的一个重要用途是捕俘变量和延迟计算，也即所谓的惰性计算（Lazyevaluations）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSth</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="built_in">println</span>(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  err = io.EOF</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doSth() <span class="comment">// printed: EOF</span></span><br></pre></td></tr></table></figure><p>在 <code>defer</code> 的高阶函数中，捕俘了外部作用域中的<code>err</code> 变量，doSth 的整个运行周期中对 <code>err</code>的设定，最终能够在 <code>defer</code>函数体中被正确计算得到。如果没有捕俘和延迟计算机制的话，高阶函数体中对<code>err</code> 的访问就只会得到 <code>nil</code> 值，因为这是捕俘时刻<code>err</code>的具体值。换句话说，在高阶函数中对外部作用域的访问是动态地延迟地计算的。</p>]]></content>
    
    
    <summary type="html">Golang Functional Programming in brief</summary>
    
    
    
    <category term="Programming Languages" scheme="https://jerry20000730.github.io/categories/Programming-Languages/"/>
    
    
    <category term="Go" scheme="https://jerry20000730.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>【C++】C++11 互斥量解决多线程数据共享问题</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/C++/multi-threading2/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/C++/multi-threading2/</id>
    <published>2024-09-02T15:18:56.000Z</published>
    <updated>2024-09-02T15:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据共享问题分析">数据共享问题分析</h2><p>在多个线程中共享数据时，需要注意线程安全问题。如果多个线程同时访问同一个变量，并且其中至少有一个线程对该变量进行了写操作，那么就会出现数据竞争问题。数据竞争可能会导致程序崩溃、产生未定义的结果，或者得到错误的结果。</p><p><em>为了避免数据竞争问题，需要使用同步机制来确保多个线程之间对共享数据的访问是安全的</em>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="type">int</span> shared_data = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; ++i) &#123;</span><br><span class="line">        shared_data++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(func)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(func)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;shared_data = &quot;</span> &lt;&lt; shared_data &lt;&lt; std::endl;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，由于 shared_data变量是全局变量，因此在两个线程中共享。对于这种共享的情况，需要使用互斥量等同步机制来确保多个线程之间对共享数据的访问是安全的。如果不使用同步机制，就会出现数据竞争问题，导致得到错误的结果。</p><p>常见的同步机制包括 1. 互斥锁 2. 条件变量 3. 原子操作</p><h3 id="互斥锁">互斥锁</h3><p>互斥量（mutex）是一种用于实现多线程同步的机制，用于确保多个线程之间对共享资源的访问互斥。互斥量通常用于保护共享数据的访问，以避免多个线程同时访问同一个变量或者数据结构而导致的数据竞争问题。</p><p>互斥量提供了两个基本操作： - <code>lock()</code> -<code>unlock()</code></p><p>当一个线程调用 <code>lock()</code>函数时，如果互斥量当前没有被其他线程占用，则该线程获得该互斥量的所有权，可以对共享资源进行访问。如果互斥量当前已经被其他线程占用，则调用<code>lock()</code> 函数的线程会被阻塞，直到该互斥量被释放为止。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="type">int</span> shared_data = <span class="number">0</span>;</span><br><span class="line">std::mutex mtx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; ++i) &#123;</span><br><span class="line">        mtx.<span class="built_in">lock</span>();</span><br><span class="line">        shared_data++;        </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Thread &quot;</span> &lt;&lt; n </span><br><span class="line">        &lt;&lt; <span class="string">&quot; increment shared_data to &quot;</span> &lt;&lt; shared_data &lt;&lt; std::endl;</span><br><span class="line">        mtx.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(func, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(func, <span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Final shared_data = &quot;</span> &lt;&lt; shared_data &lt;&lt; std::endl;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lock_guard-和-stdunique_lock"><code>lock_guard</code> 和<code>std::unique_lock</code></h3><p><code>std::lock_guard</code> 是 C++标准库中的一种互斥量封装类，用于保护共享数据，防止多个线程同时访问同一资源而导致的数据竞争问题。</p><p>std::lock_guard 的特点如下： -当构造函数被调用时，该互斥量会被自动锁定。 -当析构函数被调用时，该互斥量会被自动解锁。 -<code>std::lock_guard</code>对象不能复制或移动，因此它只能在局部作用域中使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> shared_data = <span class="number">0</span>;</span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; ++i) &#123;</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>; <span class="comment">// 使用 lock_guard 自动管理锁</span></span><br><span class="line">        shared_data++;        </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Thread &quot;</span> &lt;&lt; n </span><br><span class="line">                  &lt;&lt; <span class="string">&quot; increment shared_data to &quot;</span> &lt;&lt; shared_data &lt;&lt; std::endl;</span><br><span class="line">        <span class="comment">// lock_guard 在作用域结束时自动解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(func, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(func, <span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();    </span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Final shared_data = &quot;</span> &lt;&lt; shared_data &lt;&lt; std::endl;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>std::unique_lock</code> 是 C++标准库中提供的一个互斥量封装类，用于在多线程程序中对互斥量进行加锁和解锁操作。它的主要特点是可以对互斥量进行更加灵活的管理，包括延迟加锁、条件变量、超时等。</p><p><code>std::unique_lock</code> 提供了以下几个成员函数： -<code>lock()</code>：尝试对互斥量进行加锁操作，如果当前互斥量已经被其他线程持有，则当前线程会被阻塞，直到互斥量被成功加锁。-<code>try_lock()</code>：尝试对互斥量进行加锁操作，如果当前互斥量已经被其他线程持有，则函数立即返回false，否则返回 true。 -<code>try_lock_for(const std::chrono::duration&lt;Rep, Period&gt;&amp; rel_time)</code>：尝试对互斥量进行加锁操作，如果当前互斥量已经被其他线程持有，则当前线程会被阻塞，直到互斥量被成功加锁，或者超过了指定的时间。-<code>try_lock_until(const std::chrono::time_point&lt;Clock, Duration&gt;&amp; abs_time)</code>：尝试对互斥量进行加锁操作，如果当前互斥量已经被其他线程持有，则当前线程会被阻塞，直到互斥量被成功加锁，或者超过了指定的时间点。- <code>unlock()</code>：对互斥量进行解锁操作。</p>]]></content>
    
    
    <summary type="html">在多个线程中共享数据时，需要注意线程安全问题。如果多个线程同时访问同一个变量，并且其中至少有一个线程对该变量进行了写操作，那么就会出现数据竞争问题</summary>
    
    
    
    <category term="Programming Languages" scheme="https://jerry20000730.github.io/categories/Programming-Languages/"/>
    
    
    <category term="C++ Multithreading" scheme="https://jerry20000730.github.io/tags/C-Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>【C++】C++11 Thread线程库的基本使用</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/C++/multi-threading1/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/C++/multi-threading1/</id>
    <published>2024-09-02T15:10:31.000Z</published>
    <updated>2024-09-02T15:10:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建线程">创建线程</h1><p>C++11中，我们可以使用函数指针、函数对象或lambda表达式来实现。创建线程的基本语法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(function_name, args...)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>function_name</code>是线程入口点的函数或可调用对象</p></li><li><p><code>args...</code> 是传递给函数的参数</p></li></ul><p>创建线程后，我们可以使用<code>t.join()</code>等待线程完成，或者使用<code>t.detach()</code>分离线程，让它在后台运行。</p><p>Example: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_message</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello, world!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(print_message)</span></span>;    </span><br><span class="line">    t.<span class="built_in">join</span>();    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="传递参数">传递参数</h1><p>使用函数参数、全局变量、引用都可以向线程传递参数 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_message</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">increment</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">    ++x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string message = <span class="string">&quot;Hello, world!&quot;</span>;    </span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(print_message, message)</span></span>;    </span><br><span class="line">    t.<span class="built_in">join</span>();    </span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;    </span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(increment, std::ref(x))</span></span>;    </span><br><span class="line">    t2.<span class="built_in">join</span>();    </span><br><span class="line">    std::cout &lt;&lt; x &lt;&lt; std::endl;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，当我们使用引用传递参数时，我们需要使用<code>std::ref</code> 来包装引用，否则编译器会报错。</p><p>在 C++ 中，<code>std::thread</code>构造函数模板接受可调用对象和参数时，会复制传递给它们的参数，防止因多个线程同时修改同一数据而可能引起的访问冲突或数据竞争。然而，在某些情况下，你实际上希望线程直接作用于原始变量或对象，而不是副本，这里的<code>increment</code> 函数设计为修改传递给它的原始整数</p><h1 id="等待线程完成">等待线程完成</h1><p>使用<code>t.join()</code>方法来等待线程完成</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_message</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span> </span>&#123;    </span><br><span class="line">    std::cout &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(print_message, <span class="string">&quot;Thread 1&quot;</span>)</span></span>;    </span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(print_message, <span class="string">&quot;Thread 2&quot;</span>)</span></span>;    </span><br><span class="line">    t1.<span class="built_in">join</span>();    </span><br><span class="line">    t2.<span class="built_in">join</span>();    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;All threads joined&quot;</span> &lt;&lt; std::endl;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分离线程">分离线程</h1><p>与 <code>join</code>不同，我们可能不需要等待线程完成，而是希望它在后台运行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_message</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span> </span>&#123;    </span><br><span class="line">    std::cout &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(print_message, <span class="string">&quot;Thread 1&quot;</span>)</span></span>;    </span><br><span class="line">    t.<span class="built_in">detach</span>();    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Thread detached&quot;</span> &lt;&lt; std::endl;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="joinable"><code>joinable()</code></h1><p>joinable()方法返回一个布尔值，如果线程可以被join()或detach()，则返回true，否则返回false。如果我们试图对一个不可加入的线程调用join()或detach()，则会抛出一个std::system_error异常。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Thread started&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(foo)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (t.<span class="built_in">joinable</span>()) &#123;</span><br><span class="line">        t.<span class="built_in">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Thread joined&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程函数中的数据未定义错误">线程函数中的数据未定义错误</h1><h2 id="传递临时变量">传递临时变量</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(foo, <span class="number">1</span>)</span></span>; <span class="comment">// 传递临时变量</span></span><br><span class="line">    t.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们创建了一个名为<code>t</code>的线程，将<code>foo</code>函数以及一个临时变量<code>1</code>作为参数传递给（int引用）。这样会导致在线程函数执行时，临时变量<code>1</code>被销毁，从而导致未定义行为。</p><h2id="传递指向局部变量的指针或引用">传递指向局部变量的指针或引用：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span>* ptr)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; *ptr &lt;&lt; std::endl; <span class="comment">// 访问已经被销毁的指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(foo, &amp;x)</span></span>; <span class="comment">// 传递指向局部变量的指针</span></span><br><span class="line">    t.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="section"></h2><h1 id="reference">Reference</h1><ol type="1"><li><a href="http://www.seestudy.cn/?list_9/31.html">C++11Thread线程库的基本使用</a></li></ol>]]></content>
    
    
    <summary type="html">C++11 Thead线程库的基本使用，包括如何创建线程、启动线程、等待线程完成以及如何分离线程。</summary>
    
    
    
    <category term="Programming Languages" scheme="https://jerry20000730.github.io/categories/Programming-Languages/"/>
    
    
    <category term="C++ Multithreading" scheme="https://jerry20000730.github.io/tags/C-Multithreading/"/>
    
  </entry>
  
  <entry>
    <title>【C++】如何在C++中实现单例模式</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/C++/singleton/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/C++/singleton/</id>
    <published>2024-09-02T15:02:49.000Z</published>
    <updated>2024-09-02T15:02:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="懒汉式单例模式lazy-singleton">1. 懒汉式单例模式（LazySingleton）</h2><p>懒汉式单例牧师只有在第一次使用的时候才创建实例</p><h3 id="实现代码">1.1 实现代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 获取唯一实例的静态方法</span></span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        std::<span class="built_in">call_once</span>(initFlag, []() &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除复制构造函数和赋值操作符，防止复制实例</span></span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个测试方法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello from Singleton!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 私有构造函数，防止外部实例化</span></span><br><span class="line">    <span class="built_in">Singleton</span>() &#123;&#125;</span><br><span class="line">    <span class="comment">// 静态成员变量保存唯一实例</span></span><br><span class="line">    <span class="type">static</span> Singleton* instance;</span><br><span class="line">    <span class="comment">// std::call_once需要的标志，用于初始化一次性操作</span></span><br><span class="line">    <span class="type">static</span> std::once_flag initFlag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员变量初始化</span></span><br><span class="line">Singleton* Singleton::instance = <span class="literal">nullptr</span>;</span><br><span class="line">std::once_flag Singleton::initFlag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Singleton* singleton = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    singleton-&gt;<span class="built_in">showMessage</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>getInstance</code>方法：使用<code>std::call_once</code>来确保<code>instance</code>只被初始化一次，即使在多线程环境下也是安全的。</p><h2 id="饿汉式单例模式">2. 饿汉式单例模式</h2><p>饿汉式单例模式在类加载的时候就创建好一个静态实例，不管之后是否会用到这个实例。在多线程下是线程安全的。</p><h3 id="实现代码-1">2.1 实现代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 获取唯一实例的静态方法</span></span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除复制构造函数和赋值操作符，防止复制实例</span></span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个测试方法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello from Singleton!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 私有构造函数，防止外部实例化</span></span><br><span class="line">    <span class="built_in">Singleton</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态成员变量保存唯一实例</span></span><br><span class="line">    <span class="type">static</span> Singleton* instance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员变量初始化</span></span><br><span class="line">Singleton* Singleton::instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Singleton* singleton = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    singleton-&gt;<span class="built_in">showMessage</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reference">Reference</h2><ol type="1"><li>【字节跳动】如何在C++中实现单例模式？<span class="citation"data-cites="Lynn77-QAQ">@Lynn77-QAQ</span> <ahref="https://www.bilibili.com/video/BV1NWs4ezEn5/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=243ce9423fb82c395b4e9e6bf321ae0c">https://www.bilibili.com/video/BV1NWs4ezEn5/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=243ce9423fb82c395b4e9e6bf321ae0c</a></li></ol>]]></content>
    
    
    <summary type="html">C++实现单例模式为常考题。</summary>
    
    
    
    <category term="Programming Languages" scheme="https://jerry20000730.github.io/categories/Programming-Languages/"/>
    
    
    <category term="C++ singleton" scheme="https://jerry20000730.github.io/tags/C-singleton/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建网站</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/HexoBuild/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/HexoBuild/</id>
    <published>2024-08-04T08:32:28.000Z</published>
    <updated>2025-03-08T16:34:26.231Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="54f427658e706cbf98eab70d66eae549c84ec2e2ce53e83f5f688e570a3a5206">15e5c101571594c61d414e3197635cc04db40b8ec29c7b06e06e87ae55c52f607f2c1b3f83ef47740ce46abd0cbca4da32b74a5dbb073930dc1d5f92da82d4bc1952dc2e93cfbc0568d0295549d5f9886fe918b49728a921ec937df41e12a925f0f1295c7744eca35a7a118b36b73eee21b5dbf091a193abe952170ecc55c1963ff20a488b7c1237b6db157bcbbc3caac394fcd0a080d68d86ef5bf0b5b408d51d097a8fd453f2c7f93c80ddc1ba81e7746d8704b7a6ea4b0b5cbbb5d7af46ce094a7418757999fb240dff907d05166c45802066f4252062714d6bfb690690d23995aa5da5b2a5e0d68987398ba032719cc82e38b50d82e0b18c73155450f6cc91d791b90378ee9566cc3579eb87808eabe194171b7d8ef208f90e7e4629c694e3c0dfe68a792915c14a19d43f5ead2eb4630848c9ab7af6adbb170ebf78b7d27e5efe97711655e03be60e41eeba0201d9338cf5676599a6af0cd23716c8651d17734867827cfb0a0ce94d6ee9cfe0538ec508aef09f70c2beb0257f1506131afbf50b9d4752f81b36f9b712c7d8b98c2d8f1e44af81798be0e8f1e0371f2c211f5837b8ae8b60045e8b3339216a4e3faf32359d1b4434c38b608ad9eae4339ac6d72d8847b6d6b2ac8673b554387224dabe7ff443740bea8bdcf9cf923bed140936921db62b54d612e632a05724ce2345e4869b708c50d502743f4c5ca4bd441a64322417b4c9363e0c0fe60eaa5ded383530e5e29b611c2db19a091a3346a2fc8fc9e700b4fdb03f80f34d6213bfaf8a1ff8322b02f2a746ee2e9ff0b5fe11c56dfce6ba13b9df4997ecaedf14b18ca5825f80498a6fbfda84d46a62543eac62af89999c00105c24746a519ab2a2b568f03be425849d52a5a498c1b356482da66b9b4bde64add73a95a8d6b6a908ea5c5e9ded9198ebaecacde6be11485d0fd42fc17b86f91170e64ebb1e08108fce59dfdc26f05b5b13afa3ad185584189eece01bb6d13d4a99eb27b017ef4723dba6f7906dc1457f8fe22db5eada49ee5599805829ad54dcbb61c3e650628fcaf6affd64073b0ace79996cfaeaa10413a46040082181a3093bd77fce245c370086be7f6fe5eb35d2207f0b99d735ebdc9ac821e07d5eb53ff1d49c7177279096b8138c0af026e0238913fe17b97a055758984bf2ce503e1eb20d6508c72027124b0bf81d76ad49f3e46f74d3a2f5dae6ee20e9e8182814697b97010059870e7b35917aec062bcceb41ce5b5771c9e741aa3e831226e120966c3f17f51bc92797e28898fd5c7c27927a1650c3709bb8664a11ec38569f75a247fb38024d26eb5583d9e8c352f92b694ccbe48b8022ae0d70c0b2b43b4caa8bc5f3c00e0f2e27834604d62e032e6c26b862b8406ab46c4ef57d6885967721e54a87ae5a6070c6c4f763b4d4e521d720df0ae9b7bdc6645f6c07d071ceecc9553f6d19b041713b05669e763dfef6260b09b9e9e29b3780124584125f827c509882ad8f1a4d432558d95dd71e641e3e17d65684b0b21e381a38cfb917964cbd24dbe5d97f8daed31214a17648862944fadb15411f03f82758f9948fe80e737bf43e468091caba199e0d56d73ca5557676db445c16ca2bcc965f402b4dd8cc9ab96a296a7ec774580a009e193abd3b8698cee9e10fd93aa46393da2c4b5a229497c747b2b93f4c76b3164e3889c29a877fe8277ef8ea3dd26dd70d45defb3a13ed9e3b4811f8d6ea89abb7e73fa2f7b5e773c3a7db32ecb56ea1aefa17261b89ae093fe63ec84091fc650fdde27120eb68c8591f3aca7b421af2676a32ca55053eb4b6fe4f11bb5c8e08abe74ed3d617a2219f87c404b5b0b315bcadf78918297124240407f49fca5daa98f7b167f7ca3d9cd30ae452bef8b9fe3715bda940a17a8838304061e4f0fb3adf56da414ee17b8178d7b9554dbf40d72787c70ce361faf46e29f5c30f27cbe0594720d759d8de8bc4c633ba23547af72577a9d4f05123a73211ab4d026e0b31e33a8457584c627e50e5e59db4ca5cf058931afe1526b9ae44fa55ba7cac64ef561af2e170db8abc0b8452170bb7ac4ce5140cbb5e6a1f2740473fde1e21f17d7e48d84f5d0d861fd105f43804ae765cf6279c624f4e8569fb6903e82eaed96bebc0f22ae5cd0873e21beb541f40cad7d9d8dce4dac435d2a4303dbdd44b9741a585c0c56621bd7981e8cde31724b3c5f366b599cabbbbfae9bde902467cae8f6262c57e184e8d9e5a1e4a0d769ee5f95f8dd7d52abbd20386fd7609f52680df47c17bb29d481a98b1a7449404f8f89842430520b814dce73c58641988aad00aca5bbc8dd73de3e7e8ee31243ad6fb874244d8e94b454cdaebe2dea8469547d656c15143fa254f8de2cba20a0f80927cedafa58c06e6a0f46ca86164e507ab7bc6225330eac79f71ae8ef5c13e2143ae90b0502999a18ece0ce4d245b6f36612ecb931ad652a9f7ce1e2823dbf6a6ac77c038df2356eb79cf9595c136e12a845d2f9e7e4c1a3cb4450c572b5d2440a631be2e491c15c0155f79f6112b2aed62961cc04ca60334b9e3bbe8ac3501a16318d7f73ee15fc6ae84d5c2e321b297e2bd1eac24441df85d255956188c46925cbe25a819839b3437f82ed033431b5ca8694fcbce87170c4a9d05faebe8f988f8e07cd0ad965883e626f3797c05f72bb886ff2c2cb94fd9c59529e705b528e1c58ab1a296a8ba580ee2474efca22bf5f0c7b3ad2b2a944159432c0a7659150e66f59241462b55d4820f04a5b0a927a6b0b810dcbc469ca2946e3ddb35d8b3e12e94cf12137846572e87d141486696d472d3fc45d521da2862c061a4bddc0fac55db73cf2ce023239353dab328416aa73034070f741b59aa04941213d0f7dbb833bebbc89a4f03f4564be0b7c239fa43a281bf25c00c21790d91e6395d2129957c37a1e332495d0df5867414e76d14ecb14077973c479a03065892fed6221cc4682207096b708237a227b5bd76919c43966aa726ab24a7ea1ba4a9aa36103d88cd065e9641bbfe0125196f19469238ed67dfd77835f0706dc7e4b1bfafd62df60fba55539e3aed36975fe787b19c1c4647fed72b63a5448e3461521f89c7a77f6c7af1aaaf4c648388eff530c6cccfa6082bf2e2ce8217d361a8d2ba58d7734a0d746795978141ae5a9778d4f1a7ef3cbc1c0913f5bddbfa1a2de865c3b4ba5f144bd071556763969ff7d97136558b367e3b55f9aacb92f5166b24c52a4c5bf92b18774a58489ec5fe87f3596bdbd711a7686c09550885c1874e05915f1ae579321dc7a6475bc1b3e3b7f7c7aa0e0da207de821d05c68360b64d07795bb0188a3527169543f1360f7137bd8f175e8b69500939aa5ea03158e8a601b75d83f0cb895fff6d858b4c907debcc915c6bde13d31aded7fbb59a97d91009bd1bf4a9edb23718eba1454bb3966b150bc29f1d0b6beab5b86a42d672f8c74705ee6cc230c3ccadf3d02528c9a0784a170804048ee50b705150d7b514346b6acdb5b1630c71e84c21efa27df6fb5f86c8d74a96d2d4ff9c979b5a87f4fa14f1cd06527ca0cd86ab4cef28d08fe9bf985d676bb21056a90b99087c0f6a5742080d0d853f7199238e13a0adcdcc9d8d8792c5080c9d724e4c243ff6d00b870c78af5651b14a45290fa4cfa751e840a73963788742685cdca95be723508c8561dfa6c44fa1a901316cd00a35a13bb47a005f150a61a70b0d2e22ce60dbb3d1b6d01914f9e58b5233ad132a3879942497e2ef76b078a8b90b9aab4aa4f9961f33abb9991ee167e3a5b31b5cda734b0d3b9637ea0162f9d96a3094a0d505b3235ca9e8931a3c42537136b9e84fa79f0c9cba0b5a5425fb3b9e114501f0e5d82865722c867eb28283e1936f22925a525c93e66860effc3fddad65e78429e7f8751c3f765196b7939c0572c95c5d42285566b8e8274a665ee574f507f3a158ffccb2cb9d289f886f40aca15c73de59fc73cf3e2acd17f09416a99901e6f2b877c0c8fa5ec39e56d53023dde44fe2ca4c9da5b97f9f949ce079d30fbf2f2b537bb94b2086d25dc47ab21e99f08a4218dda4278fb9b1585eaf1893a3c7b70acbafa294cb04666ed0102db853851be14c824dbfe69da3786f618b36dd6fbb2fc4d3e7644a4f707a4736c98082f7e68a13583c008fb8625e47e7441542d44e5bcafbea8d56d20d01ad8e7a314d18dc3ebc88915b1e4e5ad284a2ea4d6fc379b2d357e8a28bba0b51195f9239634ed5f276fe055e40b17df161b531bc7d65ae6010aeb2972a27c922652698488374272cbde96b847b7054d2269f65fdf0578d72ca1e54f28100b748f5d224416ee85a94ee34893788e110f0171d6e2ab0f10e10e5104197bfe2a5f3ad417011888a91d1d3750b3f9f5817844b002f0ad658d0af57c80d871ed745af65d679fa41b496d95ba38f4c1badd9536872a6e3aba5c70285b1d8db1af10335027289357e52d134e5685d8d71c2fad675efe04e6ea5483097dc009128d26604035a382bfe98ba9ab3ff4faf5ea42cc57748df8002c9c1599f6589fd0277da0d59c324a803b09949f1ca842b226ccc87e3a80a37bca688f59f0e56f1100cd83ca5b7fa34e3ca026b636156c1c10e18b80dbe91d3fd67fba47c611481d56501a5dfb3bb85493bf7aee6f9b7de1450c5a979963e5be07e41ff22c693acb140f79b555bdc91d60d9a355dc790a8c5f73e85e59c5d5419917a799608de8d58acafcee6c4a822c2c8db296e28cbdba0d0438c42df74daa7b15a0b34866c5304c192d9d204fd6abab0f380c41af3a6d625e9d4329ad48ae68d06f88f9ce182a341b8cf714990e28d02dc53216697d9ae1990679a3b22839f18ab4c09f477687702456870e2fe4390ed49025f4775be22d02b988830e29affe45b2217dad1c77cb24dbf4d77a596481f8ef4a8e284584dbf58e06a6042b0ff3a3f714f9823652850e4088f5c54dfbaf9757308e2e2576fb3041831ea668463be82fc75dcbc93da3505b4a5190de252108e06edcafeba135111160e265ea2ba3c49e9509099e8026c5499f13f90972beca3a690798cad78244db67e0f544ab48b469ae36c7d83ed25242e27f1e20f03c82891a48141050493f06276a8569d140afe2f84ef6bec9a275c04572d6223ea029267851f133d910aca298b1970bbc3aa37c2cc762f3f30087ed4c66d7300e0866bfe2df5dccd58fad2ca1878e543d9a382c06fb0925bb06563cb187d10338c17926d561b6fac705d346086a567cd8add4014eba22bda5dba57d26776d91a459f4789bfda9ab2af7b14552519531047cabcdf1346e5e5fbe1e638927c8323276aaa6107ea5f6b24c0ffb1bff60f5f213e6fb6c1e9f8b502e95362d5838cf78724be117c6ecd6d11b302538177a7ad1a598582186638c198efaf823f973813aac18860267d1ea58e6b4da2e6743cee6558ae53f66619889b4e9aa59906133e86249bdf016b5f42d287a3c9daf69ebc177cf67faead5d6ad461f1e46c33f7189db2ab7ba5176ab062fb4f86428981f5cc401ac9555d047073171e89cb9682b87f18c333a6bd356dcda349caedf02faabcfc782471663175c9ecb9a9a29b690a6eadfb1fd9303909c1e73f8362afcd376add9d1f0a745fdb35efa8825bdd1b5e55552b348df72f1c4c98cf444d10b8df2f4dff545cbf14390288246c5bdcf5a044987078245f47f7e100ea4b091d71f3f7170eb3edc82decde31c176eb488c952990239b19216eeed812a7c704cd5d82b0e73bf0b75090022332184941b6be1e14dc515d458157998a66a0a7237212e34709c32f28fa9a897ec7a8c44adc8499a47fff8d20a9f2066a1a1d102e5885cfac8d26d471f146ef9333d8e7b594e6b557088fceb5eb81873c165f1e594e521f9b8d9466247715648201dae21a047369eae9512dbfc13a3d38886edd852203750c1de2ec3c4e4573a06ceb290a0b537ac7070a251428a7d71194a9d03c80e71eb589f88b179eeb096366e97bb257dc3c3d0c7061f4039eff83deb4c5cf3c877a30a2863a3bfe03571db99d8e601036bb42ea23a69342d6a8d50e1ea343f71b8a545a99a0e6e0a83f4387dd26db3940c03a2efdf711b6e9e4d8880d73f921795d698bb3efabb4208e412e7cb3807890db78549e5cd4b90ff5dc3edc24b777d6e2b569c05edcc6348b0df8ca4516ad489e924164e49e0523c8a3afecec86b9a0e1421f2497190b0a1ba3728cb9bb0412045eaaba331874914b9ea183793d35eceab66f98befe7c32d89ea6d3063c48774642d43c540d86650968d5ea3d0d806c5ac21139bac1e7178039086f9e73192d7157ead9327806f8d93c4cbefdb152803402a6f1168fee01b418464069781d634272c900c477c29f6e0c5ed1907b6d5c5c1df941693f2212b855011e401d3ca98f606acd9abcbd97563d413aabf1a83f559913b1108b1e6ddbd79ae1619dc63929e773ea78a2bef5ea4a1ca3b29ac91bdb43a7b7f0ed507e7a6384665aec3e76ed963f8e873f4b20c53820dbdec98532a58260a3a635a013aee10bd73374bce7ca983ce309c4e6ac2c0dc2b131d07d930a987cda786c6c6a8f70ba19cf0001116ace7664b005e4e7303731260cd8b9594f3dc1f1d05db39f74f7846fac7f4f1f3763fbec6dabd471cfedd668389b17fd68a816601340c217ce9d52dcc6e90203df935cd5e0f238f20b774c9f01998d3ef707102fd43024e6b3e25fab0ba9f324a1f8ce52288f1d540db721690066cedeb614794407039939dad5d0ba0b71140bacedc155edf600d8e633b73d7ff6f5406afb2ecee4d9f342a2a1998b4273158a381a5cf06b8db0f2621c5d4d4f1bdfc2fdce470a6f5e830ccea80bc2ed76778e1fff79d853734831aa3ac6007b0378336f6fb8e40ac9e72f18a9235e49616c3afb9c63cffff824a15dc7bb177e990da22313cde47c9afa106e4ac5300ccf73f1c3e5336dffa66bbc0ca679caf2f88eaa7b9f1744a5f291ab9561def04f1ebca6255b75a4af03ec9f9b8965be59bc51f42c255e1540735f993b07133cb2226ca5e23e83f5a55f428794c9f85fa7ec4816f1e87569283b4f1741f6b28210027f852ce6ac40dfb8d3d7e9c100a923377061737704b3182c0c0763542c9237b6cb43fc806b2aa275b386d5702ef6705ee75eacc80dc13082973cd35b051f8cf859d0989f3564888ce4e4fd3f560da8dec57cdb01cfc4096440eecdb6328b5599756bef7de380cd049d9248d5db0e3ffbace188aa0c3bbe9011e60807f8bc6ed9870c59e151cd17b988d6f58891a6ebd107c760d40d76f3be42608193a8bb94b6d3d9e664da21f5a6fab79d13d3764c92722758d90594bdebf36ab9b08dc76179bf87666d4452d5bbcaf363e4be41e4bb044ddae3d044d40836670fb4d344e540bc8efc58fa70d2936886f216250cf0bb95418c168d0d80c3207b8f6fd0d594b95b3219522fc83fd9feda5ba70c555f72e2ed75ef75576786f65d642cb3ba3766ee8a0f5ab2096e511109a302b867b394b36fce3825115e773feadaccdb1eef8c56e409dc5dd04c0d38ddd5b137ebb30e297cd4684d3fd809acf9d3b245cf77440a691298bb87c8add26299cecf12d31d265905f1ed2bc93b18fc689a255f4f17fca24824f0b11949fde1cd35cbd4d1503483fc259397792a603611802adbc2d7651a860b76acb24ae0c95451b2b41d3bd364327e7b8fa64f07124745e8d194e0fcde5cef50a5715043138711c45c96e1632b116499903f1628cab6828ae112bd83f4896930b7cfad8fa9f9826a3b6b2eca6f1cd64a0edde8e1d0eeea9d163d14e11750b0e3df98e105202fd59ecc9ba9d4aa55a12c751cb094f324c5ebd03a6de5751042fcd4434ce626b520bf76a59b50effc8b0a56e21ad480ca1073b2163eb029840be617e4d68a5db3176612cfb03a1c78d0c7a72976430bb11aa2a1216b161575b7e63817ad4e52f52fd4762297d1e8a768367e93fa3cc8bf36c62f5893426443027b3c64de4c52046dcd7e67f49497a24296390f77dfd8a46de65f484296e9fcf8d4d346a251d573f942a9223ee47db884e8669569f0b0e6a87c7e766fd7b2fe56e43114989e9bfd255aee06bba068da05f664083369f1ee7a3784b44ee82bd5c4c62750f04c83183db7ece08e9002cb309fa2f8f19e1804beb296215d3c708ba09b275a17018fc2b161b63bd0f0155d63d7f73eee05718823c14f3dd8caf1e754914b4cd87b3a23135a09eec38a0a185671973643971e435c5633781458675f05291407f5ea0be19a8e6a90189f5f605bb52590ec0b0347e32df3c932f144fc7cc2ac97c5037cce94e4d4e802790d3cebb0b1873f835361793bbebb10cb880f4968fffde378bf2a661d1690c0a87b53f6ab33ff30453a03421a760565264534824bd127bc7aafda026ab348037cc1404cf709c622824ae562ff3ce10935fbf83b890e83b3b9f394db65fa37362f460ca67ffcd53c55e9456e85f8fdd8a6dfefb79762eeadc51f9ff70b920375c4242ade3bf9a86c673a5286a6222a4ba527d521f0561ca7991499f7dc21dd6bd4a4a87efacd0e0a4f6c760270a2ca3e534e0599d7df3965b685843484d17a586237ac41a5576acb69d39bde2731e5e01daf595f93dc732b551795d0f243e799499160e58d55697899f12a67c6e3b1485d43789742793f9d350fb5497184b28d19596a4fe0f290221be51b166fef8d49d1bd5fe0f67e9c40a4ac3cac12f81af00bed30fd27aaf4dbcec9f1f69e4082f59ed4fd21161ae5fff481a45edfde78aafbeae3ee7fd3548324fa0d5dfdbba0e0d9238178126f65e907ae0cef3bac2a4403b4929ef52974fb749d2358dbe870444261a1ebd541c7fd3d318eedebe49448b3697706c791562af717ccec2e63ed80dd3e97a0b3aa9e20a27a9a4c6801e86fa112b8539dfc67efea5f7b64600598aa22dbb354a5fffd45d9c6575eadbb1959693fcff61d55d486d12db39ceee65e30945a69904113aadfda26894de2105420905963b98e39bf2675295956c2d68f481a8cd795757213dde97dabff53d8a90064a7455f68ebc482a51d2eeec2a33d7ee348c1ec364ea46846f59dc387a2a3f355d732c134cfa5213e1292037a4173b979b2573bd640f937bd232d0fbd2873df8f5a2123806831d907038e58c85df3e9685a0f508cc986eef97ad452070b653bd57e286b6df4ea7095ed260014c1afba1b2f445a3cf9d248b9c7ca8af73eca4923e298fdf9c8f991c78918e41e9a4db887f919a57c8d9e758dce4487cb001a0f2ba324e2a5995b9aff6d2149413ed41ac8a4480b28eb18aa4e94cb8318cd9aab0157d56ec945d0db175f43fddfd1efc4139db21c2d5272c0f214e8ddce05d4a59f6005998c9f7ce981c6c30efc430e1e42e5fc89347884e0b0412511e939e84926b7a341b3c296dfe695ab52531bee16c59937c87f98609523636c0579d7f13177ce7bbdd60ac844653227f301e9746bf3deb203d52ece17be027c6b5b6b3657de505c0d89b9fdcbfbae69e1ad6d6f2eca925e2a3e0d47aa87196f4d478644fa40be0c98a40aed8434298a2b7bf193897cc9f798e5ebaed04df27d26f86f6bc86cf202a310dd759cf9d61c27d3228610f074a7a531498bcfd62ee7de72a0fd6b67ff3d3ced81d5e60e2f26d3051f0d71d65d06221584973278e5a0e2062523a1bc552f7673c2343aa3034ff6e7e69d7023cd41306678b409d51b123f83c24edbac0fdfb2412df107b6b9029d31828e122797873b6c2598b830118d4ea4981683c295f893f0f037a55fe33c41cac1c458a7da98b2bec63f357168c5f1b7a7192ea8089a80d6139aedb2ec218facbd92f4d28592a0f2420ecef94efb47ff6b513e761ce4c857a5e1d356b74e8aeb982906789ba5f431c33da9e905940c8ffa747433db4a685a999e8fbc68dbd3adf117d9eac191c49b1ca1138e103939f152099018ddbdb8f990f59a02a13ce09099316c403fd082013a655312afa98494539f97efc92504084bebf317cfde3ecee54ebed506200b2db16ecc0ea76708524f4641dff1c937f6b68fa71b2a4795f4f2854d67418063a4a4ed8822c92c774a53c906bfddcd78b3317f14ea85df8bbacfce7662ddf2048d251f8a40081196ced8386740c2669eaefdd878773e4e9ea3132dd02e75e8348caba452a18f0da6b87f95f3c372ccca45cf9f4da70d3f075445cd14432362ed001cbeab7c659669307593a42c351b0e846bd239a8aec206040d4d633ad74566159b7262e0eaa7421d3d0193b2cb57470420f62ae3d191cf41d70ee5e05c8fa451e6436c6f95ba0d0d1e175ac93492c1173726a2cc0fec25553c5dee6f937019733053742b5d1f2697d807dbce4bf961cc777d1ddb80c0c98f44152f98d915d39d92c2e708405af7df650a9be2191c50d52bed7522faed2a85ea429568427655e17814ff4ba33ca07c4c2920cb559fb54490ea9e181c0fb6027129b64895ae226eff97c50a9d8369f6f9b9b21612cba8b775659d763f5b81179c3d4bfefcca25d8d37795db75492878ff903c43c9112a52555db926d83f1c94db5652f91bdc498899f092db92d7382e97057d2c30e10c6419222eae4390ad3df4d31d2eb41dab841d3995c6be30d3f370aa91b36d9e834174684ba8ffffb9f75a42f480974f34b33c2e859aad64138cf678f32f699b42fcd98646b0576d1f1d3dac83bcd13f9354d7b222e9712a3ff591e14dbe724e87a88ca790bd89b842c1940b39c25e0054540460e733af59d01559e901005f64eb073f6a0b61685561683af4a489707373708ae708a5cb193d6ca930e9b31e0c46e6813527b4dba9bb67c38adcbedaaedfb36e05f46c7840c5b762727086780fc6d9d96c9291f5e5634879309baf94c365438ecc09cb4c116c3bd37fb90eea417624a923b1b63e76e5607772a883a948b0b4060403daa32a2885ba6e8e005c9889d198f7c4fdc44500750b0a91836ccbff9619bb42228ebb8118d7e82fb4348076393e387905e3b1d77a7582316c6047bf338b22b2e2d2fa0c8b32b2b6a69199873e159a5ee94d36c1f0daea93702cbe523af848f347379ec4f23ca45dd2b891ff5a28f4024e9119052f1fb218ccbb504af04c072d70b51323f6cc5ee66906d4b29bac5bc94857e5dd340676c14542c1de4da628553cd70a136cbe369c7023eb15523ced11028d971e6c8cb8a3f25d1169e80cc9a6142c85642a19b40540643d366363de77db5cc0451442cc3e3da381c5821caaae6b92cde61790842aa9fabd3741df27b4fa3ae478573a729cf7483b47509afe53c657877941163d0ea842e7541baf895f0f5e5dfda330dd21b7d1c1291d3a8f32d6cf687fef4b5318ccc7502bf7f96f497ad2815e41563ac92c152f46adf886c310034e59178cff2b77dfac153451de42fe2098a7d36629b9580475aa44a45bac90126ec688616e0310aaae5e738e50cdafd8058c6ac572ef42094f7ff9c8dc1b56f1ac57dc66c0dad6dc88ac0d23a5f19385c9f26600ad1d806b846447af23022874e13c0298587812c10a3bdcc6c9bb75f3ce2a20e6ca802ca357ba06958c2862c35dc38873421977115bfbbdea4c2dd2717904d41c2cf50951563ec6c13b67dd865f22fb8cee6e432e66685125d24bf278627b177a64c1d46275fead3878624d2f49c64f659366ae447606e8bd7ab07b2faefa6f0868579612dfe6e91e4c683bc85395d1a946aa0f98463191fd0f412ead9cdd7df4f86c07efbbbf27a0fda55850e68f398ab8f3e868a78b01d576e704e7cc1baee20dbac43da66ec96b7bfe44c559af8a2b11bbf7afba91fd5bc05149273bf9dc6edc040de7c96d24aaccca15ab7838fadbc02b9a15daf20fbc142dacfbb3c6fb68e330a1b9f6312c394b3fbf80eeb9175d73836e8b3e3cb3058ea6210c302ebece515810a11e4e596f248456bb6cb185179e9bcccbfdad99612dc563485ac559cce23d8d52f4200adbb97643a5ca8df61da550309d262ec30b44808c98c569808ecc09604f3ed1c928b53a7a38be1ff31885594c973749fc0e61eedf74e3e9b04776ab5040db4ff5efa1027e378bd3875e5fd53cada6972bd16b8a59c931f62a51520a38878fb8b6f13719ac6b1a495b6c45ede130c53b53054f0e5c921e549601f9b18138a64587ae6cf08d1a491db4a1d684a83189a30cad7ab2d3e0e2d849c4c321396e8641cb98a957f4e5a29ea96da2b942280971845d14cdfffb61de5978c9b58d613d2847226004ae88a84408d7aa5d2c85965a67a7d79b46930d92bb3e049cb787078bc568db7febf684bda0e9307e49edf7904c92e6e0c9cfc7db6ddebd1bd3a2ff4c8dfafc129c9dd7be01fd65065f67240b0cc8c8e5402a846624d4ec2e22646596a41140be0f348efd8d47e85ee578e0e32814fd00e19a45393dd7e3c2ea8c129e3e2fc73efe7a7ffc2f2838c4077abfcbf34e16669fff6bb9dd00ff89f0fbcf340b9485facf2ac8194659c13b208ea56ae63606b8ccc9cd03e558840690f1f84da1ebfcb74aa37684132187e65c0ff29ae21267185ce487cb82b96fb5808aae43eec424f12357f19bb0d48bf80a8bf1c9de262ea7868ccee255f88e5c6aec8915469039336183e0793200101cf54b66d7f6650cc1be27674721f43ada69f75dc7fa60f1ce1a76cc985f4d232c071d8abb40688187d65040ccfd2bc66054eeb4f01699f8811e3cf117fa303a0ee3802a6650831fd533de54927e00f10d6990c9846f84258748821753811feb535457db1c53eff08e36a2719077396af5cf466c49c6ae48f9b05b7f7b0d695931738a4b1648ff2cba656f491b262a8ea7655f590522753a3c8d5b7ccfea5495e59bfa11c3bef257ed0dbbde87db223db583056bbd8e614753fda9d0119281c6c352f3bcbf3ad7e427d82b82c2f3d06e652523ab5bf3f06838031339a8edad4974ccebf621fcb7ab0acf72af7056d8951fe354de2150aa1396ed7ee8b5c26de26125ec4feaaa9a45d37334ef3868b49507a5a0b394b5bea4535f9bad00ad755713eace2afb1607199851f2dce219429b10070d2280eed1c11b6fe1e5ef068b1322280c8e353e45f750091f72fe38e26667a4191bb42f6198947db52e34e8fb3bf67047eb3e02b5afc3a173cf27f5fa919341ed94c579f910389a35009bff24e4059ff013108953e9535b8074927406aacf49e8762aa214e7f57205ce6cffbeaddbd22ed567e7753f185794d7d68f51f9fd0c3abf01b92ed7836f547a5adb9bef667bfa13e72686141ab7b60cdcd5c42f906d2eeb5e43b59191fc79cd8b9440686e1bd89038ea648b9ebfc1ded61d5684a440edc1ce667c8ce30650dbb1544ee4cd64b8ca21f63549b5c4dcafc23c00de04741db652799ab5ebba4fd4a50c3524b75989520e37bdcf5101bc1ecb1c192da9345d24bc8db00dd245d3c5ecba33c43fde0004eb054b4c241860062efb0017bb13072e828f23ffeadf26bfcda0c020f8c153f17cb0567e635ae09286fb399264d4fdb20c0992f158d2b4a3ae4b8f87388ebe804bf429b2b8dde47e95cb283ebb645abb2f4c8a97d4d66fa1f01c76a3c7dd37b7f350083f851e4656be9e64e7a8b164ea061d590afe42b1f85fbdac2bbacabb5281f444b3e9fe6814a7e6c2aca3e792229ea23257398ddd8653261b52e444b600d6120ebf7790153d599e55a2c1e9da264cc4991ff7bb03c4599262aa0b98c020f2a99ac5e94aa938cb9984fa409ce8bda3d5cd376d063995822ec1736c49df4b5fd83a44b9862f0912b19a8bfa38c4c90fff691b58cd3d2914a5f4409ef932b6458b4c08309b9d5197d21da6eae03ac9f251757d836ff60b81a9c928268928f39aa10eaf74df2b808a725a911d4ade83701b9d8cb218ca129c2ec08b27b2a3eacb51eff0dd464df160ea20b5fbe62e778c628424ddf8639fb3b619e69d5127d587068f0a6ec18c93c9418fb1a822a51f5f210c03f21c5ebeb13f1f87e6caaf4b436961ea69722c1de3aa1f3b4d2a11f9d1a569921791eddd5a164fed57803a6a079b8a4316e95ac0ba97ec21ed8a61dbdd0dc2e70fff581804760ef5427a2a89a06030abce039043897fbf4c598864ca0488d509f20e5011d7444c7ebff48d2ade8d1db2842686db05268869c1d4f4f669c83d4aad27db2252318019800b8645d437131854f435599fc99d4b2dd2841c2944986ebc97369e5cba40e0baeb658cdc1850cdb17030107689275250ac63d8af03cfda6613652932df05d17e93a07dd20d81679120381f5c2fc80bc3e7603da15681eb875da43ee65aecaede3a0de3cb86a7e3f7a150029a09608bc7d12eb4701cea867e1fb75d5b5899781fcf42c173c90a1d991368992c8a281ef238a6a0f0c83994e47c57d1e27f63e036769c8a372d982aaeb5bee7a6e1c32ace86682e713420f6a0e72994becdd86d923717533cc06d19f31eaf97b1619b364c84f64e13d5bbbe272ee08ac891c906e871b37187294c3ef26bc14fc5095c9ab8e19245a6144923814e50482d3d605825907e05851975fe2c0828fc085b7ddfa392017c27cc62ed170393626084144563dd117fb6264542bfc1a4fff148c5d436a00d74c6dfb063c36cb98564aeb651c0abeb28dcd5367a387c5e446e356209bf76f7cd9f058a068b1a0946a43de6cb35703108b44397a0f2cf9499fa6099d6ac374c33332eb0696bacc0634641edba3256a75c4f949b2068e4535d128be629938faa15ad027380fdfedee82ccf2ba9770f176144556a15adf669ee0fbee743ec6950349d817fb2e250d5f56d0cfd1b802da03e2d8ec626f11ec253185c917e0d858175c42be044f60339622a7ce9340b3ff62f3d4fbb706ac884b91884c44768a5ce9be02868cefe15c63a2752d126e52633aea2c7ff46825eaf80670a5b2bddcfcc6f587deab09fabe40ef4c538a23fe19fea9fa454759ee11e26eb5f2e4a86741d715ec7ad3446505b66591b501e96f5a5c853cf0bee886fe72bf4e50e2dd959de1b3d12338e25214934205d208ef2eb959c4c6deb30572db01920e8e1ac1f6136a447028b9cc694d6d817e328cd9dde0faf4c40f6c01552ef9fa717a9d13ba5ba0a028897cf3ec772c11145b7a16bfa2babd4030541d843c7a39dbafafdd9371f2b79209d5987cf27b76c396d52a6550589da14e4325f8d99638d77a0ddd7b93446ac5580d25c43a7e2950f39f9a3b13bb8529355741617fde5bbf26d45924d33dab1f923452b10842970fc5fdc55b7485f380b9d9fbc024076df8be8df4b44338bee1ea2f2efd85b979ebb768f26c0c472017a8a0ce7e6c12aa73b72a84c788afa98d90daab6fdbbc4b1a842bc56aa64d35f0e07cafe9845bd2167f1898a0d82bf1c5bcff5c1bb7cc4ad93e74958a52ee30e90316691fe5851976fd096855c0ed6ffb2075598fb4e0a6591c86874ebcd53d01d3710a5b630230f4e141500cfc3742d8d3c32dcb66e5adc6a018b780c308656daf83bd4490dd61fc1553e1d49c81470238713f0a142bfd646011d8cecc263935b9ae466240b9ce174869aa7c1dbe903c5078146b7488447f335f12c6c12195eb9115c632040996f5d097fc65e786a98f453d6107894eea4b4ccbbe7a8f7239b2f28dfb7cbafce72c494dd243df097719cc0298d29f186bb35f5ca1026691d366e0849f5f650914a70bdab8ed2c5000b2dcde8e258fa8a61e5015a6b342543302253369991ac088a03f8f581720242080a0d3fa33e8cf8a7b57fc4c4eb94c544755d99bf5227cab2b04f737ae87ec800277a0077328f6458de9644346e8f9f9ba8e0cbf7c080450c6557127a06f1fd57b31960af5cab6c84fdd43b3371f4534379b4045f4489d29986860e450cf5871cad77c1046e44edce9ee82671dbe4bff01443092d19e64fd283bd5dced539c6386468fa35cf433d67c2e222efd9377dad97d841a35c371b9efd9835989b420dd8b56fe199bb2a13e8ddc1626249b1220ff5ac48224f8ae172d3849c9505d10931c306d1c6248f2c2d67ff88fbf4fa7c3e2f0062802e618f85f257a2b9ca9051f0c1db612492b185cac7423bed2f73b750dfd9339e577eaac3035bc3d5a5b5cfd31fdd8aab5175dabeab531bca7c4d69b60daa87c6bf78f68b65749df7f7f54e429cb8a2079d9de4ea63e65fff9f2b4d471de6806e005864251ae969d38538b991e1ba24e3580449d17d10ba1479b037cbe8c08c46a88f5650df5c70220e7fb7d5c09cfef6a0fee6dd53f48e90058190a1fa0573f9b8cd1ad1b89eef7d2faab1a775e1cb386db0643aac1e2aaa44cda2d7cb6dc3801daafef37199dd2aa16f492e831deb7c7ddc9a7e614e64348f3e5ff3e459283d9999cf4afccbf6fbe7cd133eedec7a37be14cac5616867b584e7f59de808bd0034d01f34fc5636b22d6381fa2ff6f1842ee375709e4e3a19e3241f1a909880b936ae601a851eb843f6dbe2158b53f61e23658e164f34120667a49bb625a4c1fb97dc469a5f6c26aa30175178ccbbbf5d45b064ed893038dc94202945ca219dead876e1d2e44a019ec4e93fca344109938abf49e337dcfb4a5ab6570d256bca3f4a4a3c54a0015d5f40bcb15b41d02fbe50cef74555fb5eb92b0b8a771f4683a56339bac85b8b3fd5a4dc4d674c9f5303e17b177be6408370c4e66f2a978dd08176310127b27f0b8135e52dc291e1bdcfc9c16ecdd9ddecae24064bf7101c65211f6e4a1f85af3785d3dfe253bcfa2f5b01d45f3e8dc7eb89efecd38662f9f19775d55d6cacdf9c7d5cb2c156e66ccad3f3fb8b7d2ea30f4cbb0f61a8cdbab1ddd008fe55a5dd6c0f1be308ecd3376a2a8f5b7346d41e44ffde79925f13cd13ab0e5ff4feb5ba4ddda7ef26d10e626cfd53452016fdff6c4dbc16b6f20020c679652cf8f9259586d176ced38581a6f906c79406b6f3c5495f880a1473203776a7fbd07c45a0dd3feec99ad8770a71567b7d69f01c35c968372b9f7a45ba8cc45a4949110d16620cb261ffe9d691ef03de5d5a68e20d45937d0e5e8c6d619bafe511ec074d3fb424e4d18bae42573169a2ccd50b730ecc04667fa8df0ab8b82adfaf8569fe86ac3c2cb2bf30e797be7605116a52f13680ede582891e46755ae4e3ef9fd87ef8205bfedc79f2d0c5e8406c8d6217af62422e1ec1a503d449427dc43ad92c9dd7e77cd737ac6b90bef5a0e418308307524860cc660c76fd3c67698e4536fcc5f5f39cb1615405bda5e700d23c7e7bdf86cefef37c0acfd8a87eb209db09d02a7c6324bde96dff1276dfc5f3440312462524b0d122a9a7bb3ac104dad398d0ed17026578d7f25aa37358220f19e0b6b42756e3e25905337313b27b077f6f42d5d6fd03c4547151e207fc1ce2d565d9563d548c09b25725ff4d7c4eb6f96cd327a7f38c15547ecd84376912e86f383d02dab1c89f4af0495537dad2e9cf58e41100df9baff078ff74d5af6323f4f827f78c776bd191de7ccbd764e7115b3993dcab5e926a108a138c0a02b385777f3b65edd3d7ed9e1ad640319e359dbfa336baf4256566b47b674207040749855df1ded1b34afe64c7471cab410dba52b763b863fda0a40b6af90f1aab5ef90146b729fc04935df41d8b9c087616feb309153ef679e0fefafd807e0deecdcf3715f052f45d8ffd51f3e23aa5c92fc71ab66b60ec67faea64f41ed61b1c2cc2c9ac7333e0c0c24c7a2a85b408655fe3e4d1c1f7c2a7be3b97f73a4e9154e81d8c660b5b7c0b3d9de987bbe04665ce2325f7b834b40cceee1ba68dcf857cb8fa992a6dc10e4720477afb08d56081d25d2f0bcb5867a47ef57d2e23cf016c19aba8b11abdb5e7f10bb22ae745d2bc2720382ce2259049d0d8d099d6333744f857a76f20edcac327ecaaad0971cf9e6f354177cbfc7ed64896b9fa09079d7a69aad28bd0e1c7e089a9000cc9a18efb5f083f0379da31855ee59003a2f02a566992aca0b3c87663ee01191519af21bb3028d108e994248a84d6e5210520fa4d79ea156b7bfb241d4957c120e8defbb9e29c419e7ad0af8a1143041c5cac5adab345e9a789e6e88c051d4da7bd252d6b2f42cf37a374d01ce567b5cb62873d80745c8efdfdab6d6ed4bf1c41b3c42e68c5418228ee827ea133bc314126d62cff6fdf9876c35445c885626d6531872bad138d0aba1b63804badcd31da48143504c5e86c01588ad587429045cbc090e7f7173ac1025591232ef63c43ba68b137036b3614c201ea0d20fbdec682401c27069e336b1f797b42f4c575f284507f61f280c0ebf8884c99d6fb195baa0ea8ee22bfd96ccd1d3f3d9c86b28c6a7c8de60c7753252bc919be1b3c999bd95423110dbe5f71d1ee5b8959494db66f4034bb68fa0647bca9f7ffcef287be0b4422398b6601720161d860110b4db799924134341dc7f03b5ee9401662ad13ad28242cda14686e63ba84a613d7654b7d74dd87e3d8033a6bc67fac5a1909592e3187750d08a4f3b9292a2d5f0268c9c693e159642f43b4e75395d49b273e70d33d9ae19fd9102745c0d94e9c6acada9d64824532e68ab7607338c3fbfecf6f422cf4c5a44132c93b2bf7b0b019c0bcd55b12fca03c17ae239729832beb4c2f00414ea7ab4cb5351564c9559589f34b3c4e2acdae5ff1e7074629a4a3ef98ca6d7e490ae2e8ed9fa08ba300a1774729e8f735fec13dc01864375407c95d19ea7d28014f168d7ddd7708eafed8d5baa1e4b89ebb45e66b34712deb738dde48bc997d1175ca6760f2362b8d9c235dcacb8b6a3309d11932deafa7e186f2ee2e3b5c753d57c4076b98faa02b756875f9d8128ce0796105c508cd6e4c4d9760cb01cba74ceb0536bcc2e379d0b302a22e2910d6ca28b7a1a0c8ed7472df86cb8ebe043cc37058a700c03139a4c8751e8c1c341109401c564e529b2ca6fcf974f10556a3d77579c60e02562d3f648bb1650836bf7f56a2800dcbbc39c1e424a4aeaeb34dd3745f3a64aac96cc41dd59337754a9dac3fe9e70e88860e1c0184dd8694b1e4fddac59091dc7b781c12b71e09a9f083f7ba44a7b642d574ecbad37f052d8d8312c914c0846eb8ead55f97a8cf245a2d1e77715d2366ecde0c5426d309e3d597a8c9695bb9d8562ca99a53e1b81df3dab0ca33b42c1c89296b8d0cd0b5bf10b10e3113eff70b614468f91759f670bfaeeefd308109504b46935994f9de0883e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码以访问内容 Please input the password to view the content</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">The reason why this passage has been encrypted might be due to the fact that the blog contains (1) personal information, (2) private configuration (e.g., mac address, ip addresses), or (3) other reasons.</summary>
    
    
    
    <category term="环境配置" scheme="https://jerry20000730.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Hexo" scheme="https://jerry20000730.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Go Programming Languages - OOP</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_object/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_object/</id>
    <published>2024-06-01T16:49:48.000Z</published>
    <updated>2024-06-01T16:49:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gos-support-about-oop">Go's support about OOP</h1><p>Go only supports <strong>encapsulation</strong>, does not support<strong>inheritance</strong> and <strong>polymorphism</strong>. Go onlyhas struct, does not has class (like C programming language)</p><h2 id="struct-how-to-create-an-instance">struct: how to create aninstance</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> treeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    value <span class="type">int</span></span><br><span class="line">    left, right *treeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> root treeNode</span><br><span class="line"></span><br><span class="line">    root := treeNode&#123;value: <span class="number">3</span>&#125;</span><br><span class="line">    root.left = &amp;treeNode&#123;&#125;</span><br><span class="line">    root.right = &amp;treeNode&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">    <span class="comment">// unlike C++, we do not need `-&gt;`</span></span><br><span class="line">    root.right.left = <span class="built_in">new</span>(treeNode)</span><br><span class="line"></span><br><span class="line">    nodes = []treeNode &#123;</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;,</span><br><span class="line">        &#123;<span class="number">6</span>, <span class="literal">nil</span>, &amp;root&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="factory-function-a-difference-between-go-and-c">factory function(a difference between Go and C++)</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// we do not need to care</span></span><br><span class="line"><span class="comment">// if treeNode here is a temporary variable</span></span><br><span class="line"><span class="comment">// or variable on the stack</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNode</span><span class="params">(value <span class="type">int</span>)</span></span> *treeNode &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;treeNode&#123;value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    root.left.right = createNode(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Question: was the variable created on stack or heap (a question thatis important in C++ languages) Answer: not important! The compiler willdecide if it is allocated on stack or heap</p><h2 id="define-methods-for-struct">Define methods for struct</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the parenthesis after func is called `receiver`</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node treeNode)</span></span> <span class="built_in">print</span>() &#123;</span><br><span class="line">    fmt.Print(node.value)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *treeNode)</span></span> setValue(value <span class="type">int</span>) &#123;</span><br><span class="line">    node.value = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if we want to use</span></span><br><span class="line">node.<span class="built_in">print</span>()</span><br><span class="line">node.setValue()</span><br></pre></td></tr></table></figure><p>The difference is, no matther what you decide: treeNode or treeNode*, both of them can be used in struct methods as needed. For example,even if you input an address of treenode:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node treeNode)</span></span> <span class="built_in">print</span>() &#123;</span><br><span class="line">    fmt.Print(node.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pnode := &amp;root</span><br><span class="line">pnode.<span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>This will also print root value because even if we pass an address,it will convert to a copy of the tree and then print it. The compiler isvery smart and can convert according to the definition of thefunction.</p><p>The difference between <code>treeNode</code> and<code>treeNode *</code> is that the <code>treeNode</code> does not allowchanging the object (it creates a copy), while <code>treeNode *</code>can change the value of the object.</p>]]></content>
    
    
    <summary type="html">Go supports OOP (object oriented programming)</summary>
    
    
    
    <category term="Programming Languages" scheme="https://jerry20000730.github.io/categories/Programming-Languages/"/>
    
    
    <category term="Go" scheme="https://jerry20000730.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go Programming Languages - Fundamentals</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_fundamentals/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Go/Go_fundamentals/</id>
    <published>2024-04-27T20:56:47.000Z</published>
    <updated>2024-04-27T20:56:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2><!-- toc --><ul><li><a href="#overview">Overview</a></li><li><a href="#environment-variable">Environment Variable</a></li><li><a href="#basic-command">Basic Command</a></li><li><a href="#go-fundamentals">Go Fundamentals</a><ul><li><a href="#hello-world">Hello World</a></li><li><a href="#input-from-stdin">Input from stdin</a></li><li><a href="#variable">Variable</a><ul><li><a href="#initialization">Initialization</a></li><li><a href="#explicit-conversion---------">Explicit conversion(强制类型转换)</a></li></ul></li><li><a href="#type">Type</a><ul><li><a href="#basic-types">Basic Types</a></li></ul></li><li><a href="#constant">Constant</a><ul><li><a href="#initialization">Initialization</a></li><li><a href="#enum--no-enum-explicitly-in-go-">Enum (No enum explicitlyin Go)</a></li></ul></li><li><a href="#condition-statement">Condition Statement</a><ul><li><a href="#for-loop">For loop</a></li></ul></li><li><a href="#if-else">If/else</a></li><li><a href="#switch">Switch</a></li><li><a href="#array">Array</a><ul><li><a href="#initialzation">Initialzation</a></li><li><a href="#iterate-over-array">iterate over array</a></li><li><dl><dt><a href="#slices">Slices</a></dt><dd><a href="#difference-between-slice-and-array">Difference between sliceand array</a></dd><dd><a href="#iterating-over-slice">Iterating over slice</a></dd></dl></li></ul></li><li><a href="#map">Map</a><ul><li><a href="#create-a-map">Create a map</a></li><li><a href="#traversing-the-map--using-range-">Traversing the map(using range)</a></li><li><a href="#get-element">Get Element</a></li><li><a href="#delete-element">Delete Element</a></li><li><a href="#map-s-key">Map's Key</a></li></ul></li><li><a href="#functions-in-go">Functions in Go</a><ul><li><a href="#typical-function">Typical Function</a></li><li><a href="#multiple-returns">Multiple Returns</a></li><li><a href="#named-returns">Named Returns</a></li><li><a href="#variadic-functions">Variadic Functions</a></li><li><a href="#defer-keyword">Defer Keyword</a></li><li><a href="#type-function-and-returning-functions">Type Function andReturning Functions</a></li><li><a href="#receiver">Receiver</a></li></ul></li><li><a href="#pointers">Pointers</a></li><li><a href="#pass-by-value---pass-by-reference">Pass by value &amp;Pass by reference</a></li><li><a href="#reference">Reference</a></li></ul></li></ul><!-- tocstop --><!-- - [Overview](#overview)- [Environment Variable](#environment-variable)- [Basic Command](#basic-command)- [Go Fundamentals](#go-fundamentals)  - [Hello World](#hello-world)  - [Input from stdin](#input-from-stdin)  - [Variable](#variable)    - [Initialization](#initialization)  - [Type](#type)      - [Basic Types](#basic-types)  - [Constant](#constant)    - [Initialization](#initialization-1)  - [Condition Statement](#condition-statement)    - [For loop](#for-loop)  - [If/else](#ifelse)  - [Switch](#switch)  - [Array](#array)    - [Initialzation](#initialzation)    - [Slices](#slices)      - [Difference between slice and array:](#difference-between-slice-and-array)      - [Iterating over slice:](#iterating-over-slice)  - [Functions in Go](#functions-in-go)    - [Typical Function](#typical-function)    - [Multiple Returns](#multiple-returns)    - [Named Returns](#named-returns)    - [Variadic Functions](#variadic-functions)    - [Defer Keyword](#defer-keyword)    - [Type Function and Returning Functions](#type-function-and-returning-functions)    - [Receiver](#receiver)  - [Pointers](#pointers)  - [Pass by value & Pass by reference](#pass-by-value--pass-by-reference) --><h1 id="overview">Overview</h1><p>The go programming language has the features in C, Java and Python.Go programming language is a grammar-sensitive language, meaning thatthe language attached great importance on grammar. Go supports gabbagecollection. Go does not support inheritance and overloading, butsupports interface. Go supports concurrency. Go does not supportcasting. Go does not support <em>assert (third-party packagesavailable)</em>, Go does not support static variable.</p><h1 id="environment-variable">Environment Variable</h1><ol type="1"><li><code>GOROOT</code>: the place where you install the Go</li><li><code>GOPATH</code>: the place where you store the source code<ol type="1"><li>src: source code</li><li>pkg: dependent package</li></ol></li><li>国内用户建议设置goproxy: export GOPROXY=https://goproxy.cn</li></ol><h1 id="basic-command">Basic Command</h1><table><colgroup><col style="width: 50%" /><col style="width: 50%" /></colgroup><thead><tr><th><strong><em>command</em></strong></th><th><strong><em>content</em></strong></th></tr></thead><tbody><tr><td>bug</td><td>start a bug report</td></tr><tr><td>build</td><td>compile packages and dependencies</td></tr><tr><td>clean</td><td>remove object files and cached files</td></tr><tr><td>doc</td><td>show documentation for package or symbol</td></tr><tr><td>env</td><td>print Go environment information</td></tr><tr><td>fix</td><td>update packages to use new APIs</td></tr><tr><td>fmt</td><td>gofmt (reformat) package sources</td></tr><tr><td>generate</td><td>generate Go files by processing source</td></tr><tr><td>get</td><td>add dependencies to current module and install them</td></tr><tr><td>install</td><td>compile and install packages and dependencies</td></tr><tr><td>list</td><td>list packages or modules</td></tr><tr><td>mod</td><td>module maintenance</td></tr><tr><td>run</td><td>compile and run Go program</td></tr><tr><td>test</td><td>test packages (go test will scan for all files ending with*_test.go, so put test and src files together)</td></tr><tr><td>tool</td><td>run specified go tool</td></tr><tr><td>version</td><td>print Go version</td></tr><tr><td>vet</td><td>report likely mistakes in packages</td></tr></tbody></table><h1 id="go-fundamentals">Go Fundamentals</h1><h2 id="hello-world">Hello World</h2><p>The first and foremost thing for a programming language is tounderstand the basic hello_world.go <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> Three things tonotice:</p><ul><li><code>package main</code>indicates where the package is in, this isthe entry point for go programs<ul><li>There is only one main function in one package</li></ul></li><li><code>import "fmt"</code>indicates importing a package</li><li><code>func main</code> like many other languages, the main function<ul><li>However, the main does not need input arguments - like Python</li><li>uses <code>os.Args</code>to obtain arguments</li></ul></li></ul><h2 id="input-from-stdin">Input from stdin</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//take input like scanf in C</span></span><br><span class="line">_, err = fmt.Scanf(<span class="string">&quot;%d %s&quot;</span>, &amp;x, &amp;y)</span><br><span class="line">fmt.Println(<span class="string">&quot;You Entered x:&quot;</span>, x, <span class="string">&quot; and y: &quot;</span>, y, <span class="string">&quot; Error: &quot;</span>, err)</span><br><span class="line"></span><br><span class="line"><span class="comment">//take input like cin &gt;&gt; in c++</span></span><br><span class="line"><span class="keyword">var</span> x <span class="type">int</span> = <span class="number">1337</span></span><br><span class="line"><span class="keyword">var</span> y <span class="type">string</span> = <span class="string">&quot;string value&quot;</span></span><br><span class="line"></span><br><span class="line">_, err := fmt.Scan(&amp;x, &amp;y)</span><br><span class="line">fmt.Println(<span class="string">&quot;You Entered x:&quot;</span>, x, <span class="string">&quot; and y: &quot;</span>, y, <span class="string">&quot; Error: &quot;</span>, err)</span><br><span class="line"></span><br><span class="line"><span class="comment">//take input with white spaces</span></span><br><span class="line"><span class="keyword">var</span> z <span class="type">string</span> = <span class="string">&quot;string&quot;</span></span><br><span class="line"></span><br><span class="line">scanner := bufio.NewScanner(os.Stdin)</span><br><span class="line">scanner.Scan()</span><br><span class="line">z = scanner.Text()</span><br><span class="line">fmt.Println(<span class="string">&quot;You Entered z:&quot;</span>, z)</span><br></pre></td></tr></table></figure><h2 id="variable">Variable</h2><h3 id="initialization">Initialization</h3><p>There are two ways to define a variable</p><ul><li><p>Implicitly initialize <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line"><span class="comment">// equivalent to var a int = 0</span></span><br></pre></td></tr></table></figure></p></li><li><p>Define initial value but without stating the variable type<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure></p></li><li><p>Define initial value plus variable type <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure></p></li><li><p>(new) convenient way without var <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">1</span></span><br><span class="line"><span class="comment">// equivalent to var a := 1</span></span><br></pre></td></tr></table></figure></p></li><li><p>使用<code>var()</code>集中定义变量 <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a <span class="type">int</span></span><br><span class="line">    b <span class="type">string</span></span><br><span class="line">    c []<span class="type">float32</span></span><br><span class="line">    d <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">bool</span></span><br><span class="line">    e <span class="keyword">struct</span> &#123;</span><br><span class="line">        x <span class="type">int</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p></li><li><p>编译器智能决定变量 <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// only can be used in a function</span></span><br><span class="line"><span class="keyword">var</span> a, b, i, s1, s2 = <span class="literal">true</span>, <span class="literal">false</span>, <span class="number">3</span>, <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span></span><br></pre></td></tr></table></figure></p></li></ul><h3 id="explicit-conversion-强制类型转换">Explicit conversion(强制类型转换)</h3><ul><li>Go中，类型转换是强制的（没有隐式转换） <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b <span class="type">int</span> = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="comment">// wrong, math.Sqrt returns float64</span></span><br><span class="line"><span class="comment">// also, a * a + b * b is int, not float64</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">int</span> = math.Sqrt(a * a + b * b)</span><br><span class="line"><span class="comment">// correct, must explicitly convert</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">int</span> = <span class="type">int</span>(math.Sqrt(<span class="type">float64</span>(a*a + b*b)))</span><br></pre></td></tr></table></figure></li></ul><h2 id="type">Type</h2><h3 id="basic-types">Basic Types</h3><ol type="1"><li><code>bool</code></li><li><code>string</code></li><li><code>int</code>,<code>int8</code>,<code>int16</code>,<code>int32</code>,<code>int64</code>,<code>uint</code>,<code>uint8</code>,<code>uint16</code>,<code>uint32</code>,<code>uint64</code></li><li><code>byte</code> // alias for <code>uint8</code></li><li><code>rune</code> // char in java, alias for <code>int32</code><ul><li>official：rune is an alias for int32 and is equivalent to int32 inall ways. It is used, by convention, to distinguish character valuesfrom integer values.</li></ul></li><li><code>float32</code>, <code>float64</code></li><li><code>complex64</code>, <code>complex128</code></li></ol><h2 id="constant">Constant</h2><h3 id="initialization-1">Initialization</h3><ol type="1"><li><p>Full version <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a <span class="type">int</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure></p></li><li><p>Without stating the type <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure> In Go programminglanguage, the initialization cannot be like the following:<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a <span class="type">int</span> <span class="comment">// not legal</span></span><br><span class="line">a = <span class="number">1</span> <span class="comment">// not legal</span></span><br></pre></td></tr></table></figure></p></li></ol><h3 id="enum-no-enum-explicitly-in-go">Enum (No enum explicitly inGo)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  cpp = <span class="number">1</span></span><br><span class="line">  java = <span class="number">2</span></span><br><span class="line">  python = <span class="number">3</span></span><br><span class="line">  golang = <span class="number">4</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>For simplicity, we can use <code>iota</code> keyword for autoincrement <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  cpp = <span class="literal">iota</span></span><br><span class="line">  java</span><br><span class="line">  python</span><br><span class="line">  golang</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>For more advanced usage: <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// e.g., we want to create b, kb, mb, gb, tb, pb...</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  b = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">  kb</span><br><span class="line">  mb</span><br><span class="line">  gb</span><br><span class="line">  tb</span><br><span class="line">  pb</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="condition-statement">Condition Statement</h2><h3 id="for-loop">For loop</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j:=<span class="number">1</span> ; j&lt;<span class="number">10</span> ; j++ &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;j&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>here <code>j:=1</code>is the alias for <code>var int j = 1</code> Injava, the type can be written in the for loop condition <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="comment">// statement here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>For go, it does not allow type to be written in the condition, but youcan use more stupid way of declaring the variable <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> j=<span class="number">1</span>; j&lt;<span class="number">10</span>; j++ &#123;</span><br><span class="line">    <span class="comment">// statement here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> Also,for go, <strong>there is no <code>**while**</code> statement</strong>,meaning that if you want to do while statement, the way to do that is tolimit the condition to just one: <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> j &lt; <span class="number">10</span> &#123;</span><br><span class="line">    <span class="comment">//statement here</span></span><br><span class="line">j = j + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> Others:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="comment">// infinite loop</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="comment">//statement here</span></span><br><span class="line">j = j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> j &gt;= <span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure></p><p>For also allowed for three ways that substitute the<code>while</code></p><ol type="1"><li><p>ignore initial state <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertToBin</span><span class="params">(v <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">  result := <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">for</span> ; v &gt; <span class="number">0</span> ; v /= <span class="number">2</span> &#123;</span><br><span class="line">    result = strconv.Itoa(v % <span class="number">2</span>) + result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>ignore initial and final state <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">  fmt.Println(scanner.Text())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>ignore initial and final state, and update condition<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// equals to while (true)</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ol><h2 id="ifelse">If/else</h2><p>Similar to most of the language, with a few exceptions:</p><ol type="1"><li>Can exclude <code>()</code>, but cannot exclude <code>&#123;&#125;</code>, theleft bracket <code>&#123;</code> must be on the same line with<code>if</code> statement</li><li><strong>Go doesn't have Ternary Operator ( x &lt; 0 ? A : B)</strong></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;io/iotuil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filename = <span class="string">&quot;abc.txt&quot;</span></span><br><span class="line">  <span class="comment">// normal way</span></span><br><span class="line">  contents, err := ioutil.ReadFile(filename)</span><br><span class="line">  <span class="keyword">if</span> (err != <span class="literal">nil</span>) &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, contents)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Another way to write this would be:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filename = <span class="string">&quot;abc.txt&quot;</span></span><br><span class="line">  <span class="comment">// equivalent to contents, err := ioutil.ReadFile(filename)</span></span><br><span class="line">  <span class="comment">// if (err != nil) &#123;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">if</span> contents, err := ioutil.ReadFile(filename); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, contents)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch">Switch</h2><p>Switch statements in go propgramming language doesn't require break;they will break by default, fallthrough keyword used to go to NEXTstatement even if condition doesn't match, <code>fallthrough</code> islike a continue so statement that after it will also executed. however aworkaround is to use <code>labels</code> and <code>goto</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">    <span class="keyword">case</span> var1:</span><br><span class="line">    <span class="keyword">case</span> var2:</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> var3:</span><br><span class="line">        f()</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> Example: <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eval</span><span class="params">(a, b <span class="type">int</span>, op <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> result <span class="type">int</span></span><br><span class="line">  <span class="keyword">switch</span> op &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">    result = a + b</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">    result = a - b</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">    result = a * b</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">    result = a / b</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;unsupported operator:&quot;</span> + op)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Note:</p><ol type="1"><li><p>Switch will automatically "break" (we do not need to writebreak)</p></li><li><p><code>fallthrough</code> = continue running the following codewithout breaking</p></li></ol><h2 id="array">Array</h2><h3 id="initialzation">Initialzation</h3><p>ways of declaring initialization <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// first one</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">3</span>] <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> balance [<span class="number">10</span>] float32</span><br><span class="line">arr2 := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line">arr3 := [...]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// two-dimension</span></span><br><span class="line"><span class="keyword">var</span> x [<span class="number">3</span>][<span class="number">2</span>] <span class="type">int</span></span><br></pre></td></tr></table></figure></p><h3 id="iterate-over-array">iterate over array</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// first method</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i&lt;<span class="built_in">len</span>(arr3); i++ &#123;</span><br><span class="line">  fmt.Println(arr3[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// second method: using range</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> arr3 &#123;</span><br><span class="line">  fmt.Println(arr3[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if we want to directly access the value</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> arr3 &#123;</span><br><span class="line">  fmt.Println(i, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="slices">Slices</h3><p>Slices are of dynamic size <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">letters := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*  using make -&gt; make([]T, len, cap) */</span></span><br><span class="line"><span class="keyword">var</span> s []<span class="type">byte</span></span><br><span class="line">s = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">//OR</span></span><br><span class="line">s := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// both equiavlent to: s == []byte&#123;0, 0, 0, 0, 0&#125;</span></span><br></pre></td></tr></table></figure></p><ul><li>左开右闭</li><li>A slice does not store any data, it just describes a section of anunderlying array. Changing the elements of a slice modifies thecorresponding elements of its underlying array. <strong>Other slicesthat share the same underlying array will see thosechanges</strong>.</li><li>Slicing a slice changes pointers of the underlying array, so it isas efficient as manipulating array indices, size and capacity of the newslice are changed too.</li><li>Example usage: <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">names := [<span class="number">4</span>]<span class="type">string</span>&#123;<span class="string">&quot;John&quot;</span>,<span class="string">&quot;Paul&quot;</span>,<span class="string">&quot;George&quot;</span>,<span class="string">&quot;Ringo&quot;</span>,&#125;</span><br><span class="line">fmt.Println(names)   <span class="comment">//[John Paul George Ringo]</span></span><br><span class="line">a := names[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">b := names[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">fmt.Println(a, b)    <span class="comment">//[John Paul] [Paul George]</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="string">&quot;XXX&quot;</span></span><br><span class="line">fmt.Println(a, b)    <span class="comment">//[John XXX] [XXX George] </span></span><br><span class="line">fmt.Println(names)   <span class="comment">//[John XXX George Ringo]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="difference-between-slice-and-array">Difference between slice andarray</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//This is an array literal:</span></span><br><span class="line">[<span class="number">3</span>]<span class="type">bool</span>&#123;<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//And this creates the same array as above, then builds a slice that references it:</span></span><br><span class="line">[]<span class="type">bool</span>&#123;<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="iterating-over-slice">Iterating over slice</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> arr &#123;<span class="comment">//do stuff &#125;</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> arr &#123;<span class="comment">//do stuff &#125;</span></span><br><span class="line"><span class="keyword">for</span> i, _ := <span class="keyword">range</span> arr &#123;<span class="comment">//do stuff &#125;</span></span><br></pre></td></tr></table></figure><h2 id="map">Map</h2><p>Map format: <code>map[k]v</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ccmouse&quot;</span>,</span><br><span class="line">  <span class="string">&quot;course&quot;</span>: <span class="string">&quot;golang&quot;</span>,</span><br><span class="line">  <span class="string">&quot;site&quot;</span>, <span class="string">&quot;imooc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;quality&quot;</span>: <span class="string">&quot;notbad&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create-a-map">Create a map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// m2 == empty map</span></span><br><span class="line">m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line"><span class="comment">// initialize the space</span></span><br><span class="line">m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="traversing-the-map-using-range">Traversing the map (usingrange)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">  fmt.Println(k, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get-element">Get Element</h3><p>Unlike Python when accessing non-exist key, it will pop exceptions,Go will not, and it will return two values on accessing the valuethrough keys, 1) the value itself, and 2) a bool of whether the elementexists <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ok will be whether the key exists</span></span><br><span class="line">courseName, ok := m1[<span class="string">&quot;course&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> courseName, ok := m1[<span class="string">&quot;course&quot;</span>]; ok &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;causeName&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;key does not exist&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="delete-element">Delete Element</h3><p>The delete() function is a direct and effective way to eliminate akey−value pair from a map. By specifying the key to delete, you canpromptly remove the corresponding data from the map. <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  delete(mapName, key)</span></span><br><span class="line">name, ok := m[<span class="string">&quot;name&quot;</span>]</span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure></p><h3 id="maps-key">Map's Key</h3><ul><li>Map uses hashmap as its data structure, so other than<strong>slice</strong>, <strong>map</strong>, <strong>function</strong>,other type can be used as keys.</li><li>Sturct data without <strong>slice</strong>, <strong>map</strong> and<strong>function</strong> can also be the key</li></ul><h2 id="functions-in-go">Functions in Go</h2><h3 id="typical-function">Typical Function</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// return void</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>, y <span class="type">int</span>)</span></span>  &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------arguments-----return------</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>, y <span class="type">int</span>)</span></span>  <span class="type">int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----same type arguments-----------</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span>  <span class="type">int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="multiple-returns">Multiple Returns</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//in main</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := swap(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line">fmt.Println(a, b) <span class="comment">//prints &quot;world hello&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="named-returns">Named Returns</h3><p>You can declare return variables and name them at the beginning, theyare returned in the end. <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Returns x,y at the end.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="type">int</span>)</span></span> (x, y <span class="type">int</span>) &#123;</span><br><span class="line">    x = sum * <span class="number">4</span> / <span class="number">9</span></span><br><span class="line">    y = sum - x</span><br><span class="line">    <span class="comment">// by default, it returns x and y</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    <span class="comment">//return a,b  &lt;- u can override default return of x,y.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="variadic-functions">Variadic Functions</h3><p>The rightmost argument can be a list of variable size(<em>slice</em>) of data. <code>...</code> three dots means you arepassing a variable size of data <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">average</span><span class="params">(x <span class="type">int</span>, values ...<span class="type">int</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="comment">//print values</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Single argument value: &quot;</span>, x)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Variable argument values: &quot;</span>, values)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//calculate average</span></span><br><span class="line">    total := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, value := <span class="keyword">range</span> values &#123;</span><br><span class="line">      total += value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">float64</span>(total) / <span class="type">float64</span>(<span class="built_in">len</span>(values))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    avg := average(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;Average:&quot;</span>, avg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="defer-keyword">Defer Keyword</h3><p><code>Defer</code> used before a functions executes the function atthe end of the scope of it.</p><ul><li>usually used to close opened files/buffers so you open the file andcloses it using defer in the next line to keep things clean.</li><li>they're executed as a <strong>stack</strong>. <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;One&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;Four&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;Three&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;Two&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Prints One Two Three Four</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="type-function-and-returning-functions">Type Function andReturning Functions</h3><ol type="1"><li>Functions can be assigned to variables<code>func0 := func() int &#123;x++; return x&#125;</code></li><li>Functions that are returned from another functions has its own scopeper returned function <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incrementGlobalX</span><span class="params">()</span></span> <span class="type">int</span>  &#123;</span><br><span class="line">  x++</span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wrapper</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">  x := <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    x++</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fn := wrapper()</span><br><span class="line">fmt.Print(wrapper())</span><br><span class="line">    fmt.Print(wrapper())</span><br><span class="line">    <span class="comment">// print 12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">//local x</span></span><br><span class="line">  x := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  func0 := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;x++; <span class="keyword">return</span> x&#125;</span><br><span class="line">  func1 := incrementGlobalX <span class="comment">//without ()</span></span><br><span class="line">  func2 := wrapper()</span><br><span class="line">  func3 := wrapper()</span><br><span class="line"></span><br><span class="line">  <span class="built_in">println</span>(func0(), <span class="string">&quot; : func0 (local x)&quot;</span>)</span><br><span class="line">  <span class="built_in">println</span>(func1(), <span class="string">&quot; : func1 (global x)&quot;</span>)</span><br><span class="line">  <span class="built_in">println</span>(func2(), <span class="string">&quot; : func2 (per func scope x1)&quot;</span>)</span><br><span class="line">  <span class="built_in">println</span>(func3(), <span class="string">&quot; : func3 (per func scope x2)&quot;</span>)</span><br><span class="line">  <span class="built_in">println</span>(<span class="string">&quot;Second Increment&quot;</span>)</span><br><span class="line">  <span class="built_in">println</span>(func0(), <span class="string">&quot; : func0 (local x)&quot;</span>)</span><br><span class="line">  <span class="built_in">println</span>(func1(), <span class="string">&quot; : func1 (global x)&quot;</span>)</span><br><span class="line">  <span class="built_in">println</span>(func2(), <span class="string">&quot; : func2 (per func scope x1)&quot;</span>)</span><br><span class="line">  <span class="built_in">println</span>(func3(), <span class="string">&quot; : func3 (per func scope x2)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incrementGlobalX</span><span class="params">()</span></span> <span class="type">int</span>  &#123;</span><br><span class="line">  x++</span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wrapper</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">  x := <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    x++</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="receiver">Receiver</h3><p>Receiver is the way you create a method for a specific type/struct<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> rect <span class="keyword">struct</span> &#123;</span><br><span class="line">    width, height <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (r *rect) is called rceiver</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *rect)</span></span> area() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.width * r.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r := rect&#123;<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">areaX := r.area()</span><br><span class="line">fmt.Println(areaX)</span><br></pre></td></tr></table></figure></p><h2 id="pointers">Pointers</h2><p>Similar to C/C++ <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value <span class="type">int</span> = <span class="number">1000</span></span><br><span class="line"><span class="keyword">var</span> pointer *<span class="type">int</span> = &amp;value</span><br><span class="line"><span class="built_in">println</span>(value)                <span class="comment">//1000</span></span><br><span class="line"><span class="built_in">println</span>(pointer)              <span class="comment">//0xfffffffff</span></span><br><span class="line"><span class="built_in">println</span>(*pointer)             <span class="comment">//1000</span></span><br><span class="line">(*pointer)++  <span class="comment">//1001</span></span><br><span class="line">*pointer = *pointer + <span class="number">10</span>    <span class="comment">//1011</span></span><br><span class="line"><span class="built_in">println</span>(*pointer)<span class="comment">//1011</span></span><br><span class="line"><span class="built_in">println</span>(*pointer + *pointer)  <span class="comment">//1011 + 1011 = 2022</span></span><br></pre></td></tr></table></figure></p><p>Difference?</p><ol type="1"><li>Pointer cannot do arithmetic calculation: you can change whatpointer points to, but you cannot change the pointer itself</li></ol><h2 id="pass-by-value-pass-by-reference">Pass by value &amp; Pass byreference</h2><ol type="1"><li>Every thing is passed by value except <strong>arrays, slices, mapsand channels</strong> which some calls r<strong>eference types</strong>,these types are passed by reference ( they internally have pointers, sono copying of the actual data happens when passing them) .</li><li>Unlike C, where the address of a local variable will be recollectedafter the function returns, it's perfectly OK to return the address of alocal variable (like Java); the storage associated with the variablesurvives after the function returns.</li></ol><h2 id="reference">Reference</h2><ol type="1"><li>https://github.com/sherifabdlnaby/Golang-study-notes</li><li>Coursera - Functions, Methods, and Interfaces in Go, University ofCalifornia, Irvine.</li><li>慕课网 Google资深工程师深度讲解Go语言 由浅入深掌握Go语言</li></ol>]]></content>
    
    
    <summary type="html">Go programming language is a grammar-sensitive language, meaning that the language attached great importance on grammar. Go supports gabbage collection. Go does not support inheritance and overloading, but supports interface. Go supports concurrency. Go does not support casting. Go does not support _assert (third-party packages available)_, Go does not support static variable.</summary>
    
    
    
    <category term="Programming Languages" scheme="https://jerry20000730.github.io/categories/Programming-Languages/"/>
    
    
    <category term="Go" scheme="https://jerry20000730.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>COMP3052 Computer Security 5 -- Firewall</title>
    <link href="https://jerry20000730.github.io/wiki/Lecture%20Note/COMP3052%20Computer%20Security/CS7/"/>
    <id>https://jerry20000730.github.io/wiki/Lecture%20Note/COMP3052%20Computer%20Security/CS7/</id>
    <published>2024-03-31T20:54:51.000Z</published>
    <updated>2024-03-31T20:54:51.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#osi-seven-layer-model--for-reference-">OSI Seven LayerModel (for reference)</a></li><li><a href="#firewall-brief">Firewall brief</a><ul><li><a href="#firewall-basic-function">Firewall Basic Function</a></li><li><a href="#disadvantage-of-firewall">Disadvantage ofFirewall</a></li><li><a href="#types-of-firewall">Types of Firewall</a><ul><li><a href="#packet-filters">Packet Filters</a></li><li><a href="#stateful--dynamic--packet-filters">Stateful (dynamic)Packet Filters</a></li><li><a href="#proxy-servers">Proxy Servers</a></li><li><a href="#nat--network-address-translation-">NAT (Network AddressTranslation)</a></li><li><ahref="#why-we-need-host-based-firewall-if-we-already-have-network-based-firewall-">Whywe need host-based firewall if we already have network-basedfirewall?</a></li></ul></li><li><a href="#iptables--configures-firewall-in-linux-">IPTABLES(configures firewall in Linux)</a><ul><li><a href="#example-rules-for-iptables">Example rules forIPTABLES</a></li></ul></li><li><a href="#packet-filtering-policies--classification-">PacketFiltering Policies (classification)</a></li><li><a href="#stateful-packet-filtering-policies">Stateful PacketFiltering Policies</a><ul><li><ahref="#-font-color---ffa500----understand----font--new--established--related-in-iptables"><font color="#FFA500">[UNDERSTAND]</font>NEW, ESTABLISHED, RELATED in IPTABLES</a></li></ul></li><li><a href="#packet-filter-issues---drawbacks">Packet Filter Issues&amp; Drawbacks</a></li></ul></li></ul><!-- tocstop --><h1 id="osi-seven-layer-model-for-reference">OSI Seven Layer Model (forreference)</h1><p><img src="/images/CS/Part5/1.png" /></p><h1 id="firewall-brief">Firewall brief</h1><ol type="1"><li><p><strong>Usage</strong>: prevents unauthorised access of packetsfrom one network to another.</p></li><li><p><strong>Functions</strong>:</p></li></ol><ul><li>Implements 'single point' security measures</li><li>Security event monitoring through packet analysis and logging</li><li>Network-based access control through implementation of a ruleset.</li></ul><ol start="3" type="1"><li><strong>Location</strong>:</li></ol><ul><li>Network Firewalls: placed between a subnet and the internet</li><li>Host-based Firewalls: placed on individual machines</li></ul><ol start="4" type="1"><li>extended concept: <strong>DMZ</strong> (demilitarized zone)</li></ol><ul><li>A demilitarized zone is a small subnet that separates externallyfacing services from the internal network</li><li>Firewall is an implementation of DMZ</li></ul><h2 id="firewall-basic-function">Firewall Basic Function</h2><ol type="1"><li>Firewall defends a protected network against parties services thatshould only be available internally (公司内网)</li><li>Firewalls restrict access from inside to outside services</li><li>Firewalls can perform Network Address Translation (NAT)</li></ol><h2 id="disadvantage-of-firewall">Disadvantage of Firewall</h2><ol type="1"><li>Cannot protect against attacks that bypass the firewall(tunneling)</li><li>Cannot protect against internal threats or insiders</li><li>Cannot protect against the transfer of virus-infected programs orfiles</li></ol><h2 id="types-of-firewall">Types of Firewall</h2><h3 id="packet-filters">Packet Filters</h3><ul><li><p>Location: layer3 (network layer) and layer4 (transportlayer)</p></li><li><p>Goal: specify which packets are allowed or dropped, based on:</p><ul><li>Src / Dst IP</li><li>TCP/UDP port number</li></ul></li></ul><p>The packet filter will be used for both inbound and outbound traffic,and achieved by examining the packet header.</p><p>Example implementation of Packet Fileter in Linux:<strong><em>IPTABLES</em></strong></p><h3 id="stateful-dynamic-packet-filters">Stateful (dynamic) PacketFilters</h3><ul><li>Stateful packet filters understand requests and replies<ul><li>E.g. TCP open sequence (SYN, SYN-ACK, ACK) pattern</li></ul></li><li>Stateful packet filters can support policies for a wide range ofprotocols: TCP, FTP, IRC etc</li></ul><h3 id="proxy-servers">Proxy Servers</h3><p>Using a proxy server to represent you to send request to the server.So that it can prevent unwanted connection or malicious behaviours tothe actual web server.</p><p><img src="/images/CS/Part5/proxy.png" /></p><p><strong>Issues:</strong></p><ol type="1"><li><p>large overhead (send packet to the proxy server first, and thenthe target web server)</p></li><li><p>more expensive than packet filtering (need a seperate proxyserver)</p></li><li><p>Configuration is complex</p></li></ol><h3 id="nat-network-address-translation">NAT (Network AddressTranslation)</h3><ul><li>background: shortage of IP address</li><li>Advantage:<ol type="1"><li>machine is totally hidden from the internet</li><li>only established connections are forwarded to your internalmachine</li><li>prevent unsolicited attacks on random ports</li></ol></li></ul><h3id="why-we-need-host-based-firewall-if-we-already-have-network-based-firewall">Whywe need host-based firewall if we already have network-basedfirewall?</h3><ul><li>Background:<ul><li>host-based firewall: firewall installed on endpoint devices: laptop,mobile devices, etc.,</li><li>Network-based firewall: A network-based firewall is a firewallsoftware installed at the network perimeter, typically <strong>betweenan organization's internal network and the Internet</strong>.</li></ul></li><li>Why?<ul><li>Subnet is not secure. Attack may come from internal, notexternal</li></ul></li></ul><h2 id="iptables-configures-firewall-in-linux">IPTABLES (configuresfirewall in Linux)</h2><p><strong>Brief:</strong> - First rule to match is applied - Rules areorganized in chains - Uses tables to store chains, matches result in ajump, else we check next rule - Multiple chains can exist in onetable</p><p><img src="/images/CS/Part5/iptables.png" /></p><h3 id="example-rules-for-iptables">Example rules for IPTABLES</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i eth0 -p tcp --dport 80 -j DROP</span><br></pre></td></tr></table></figure><p>where:</p><table><colgroup><col style="width: 13%" /><col style="width: 86%" /></colgroup><thead><tr><th>Parameter</th><th>Meaning</th></tr></thead><tbody><tr><td><code>-A</code></td><td>Appending to specific chains</td></tr><tr><td><code>INPUT</code></td><td>Rule in INPUT chain</td></tr><tr><td><code>-i</code></td><td>Checking incoming service request</td></tr><tr><td><code>eth0</code></td><td>Through network adapter 1</td></tr><tr><td><code>tcp</code></td><td>Rule applies to TCP protocol instead of UDP</td></tr><tr><td><code>--dport</code></td><td>Destination port (the listening port on this machine)</td></tr><tr><td><code>-j</code></td><td>Jump</td></tr><tr><td><code>DROP</code></td><td>Jump target is DROP, which means to drop all incoming request</td></tr></tbody></table><h2 id="packet-filtering-policies-classification">Packet FilteringPolicies (classification)</h2><ol type="1"><li><p>Permissive (Black listing) - allow everything except dangerousservice: easy to make mistakes <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># allow all input/forward/output</span></span><br><span class="line">iptables -P INPUT/FORWARD/OUTPUT ACCEPT</span><br><span class="line"><span class="comment"># but restrict incoming connection to the machine ssh services</span></span><br><span class="line">iptables -A INPUT -p tcp --dport ssh -j DROP</span><br></pre></td></tr></table></figure></p></li><li><p>Restrictive (White listing) - block everything except designateduseful services: secure, but easy to DoS yourself <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># drop all input/forward/output</span></span><br><span class="line">iptables -P INPUT/FORWARD/OUTPUT DROP</span><br><span class="line"><span class="comment"># allow outgoing SSH traffic </span></span><br><span class="line">iptables -A OUTPUT -p tcp --dport ssh -j ACCEPT</span><br></pre></td></tr></table></figure></p></li></ol><h2 id="stateful-packet-filtering-policies">Stateful Packet FilteringPolicies</h2><p>IPTABLES has modules for stateful packet filtering</p><ul><li>Allow incoming / outgoing SSH connections <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW, ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state NEW, ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure></li></ul><h3id="understand-new-established-related-in-iptables"><font color="#FFA500">[UNDERSTAND]</font>NEW, ESTABLISHED, RELATED in IPTABLES</h3><ul><li><strong>NEW</strong> — A packet requesting a new connection, such asan HTTP request.</li><li><strong>ESTABLISHED</strong> — A packet that is part of an existingconnection.</li><li><strong>RELATED</strong> — A packet that is requesting a newconnection but is part of an existing connection.</li></ul><h2 id="packet-filter-issues-drawbacks">Packet Filter Issues &amp;Drawbacks</h2><ol type="1"><li>Cannot prevent attacks that exploit application-specificvulnerabilities</li><li>Cannot support higher-level authentication schemes</li><li>Easy to accidentally allow or deny packets incorrectly</li></ol>]]></content>
    
    
    <summary type="html">A firewall is a network security device that monitors incoming and outgoing network traffic and decides whether to allow or block specific traffic based on a defined set of security rules</summary>
    
    
    
    <category term="COMP3052 Computer Security" scheme="https://jerry20000730.github.io/categories/COMP3052-Computer-Security/"/>
    
    
    <category term="COMP3052 Computer Security" scheme="https://jerry20000730.github.io/tags/COMP3052-Computer-Security/"/>
    
  </entry>
  
  <entry>
    <title>腾讯2024暑期实习笔试</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AF%95/tencent/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AF%95/tencent/</id>
    <published>2024-03-31T19:56:54.000Z</published>
    <updated>2024-03-31T19:56:54.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#q1--------">Q1 小红的图上染色</a><ul><li><a href="#----">题目描述</a></li><li><a href="#----">输入描述</a></li><li><a href="#----">输出描述</a></li><li><a href="#--1">示例1</a></li><li><a href="#----">解题思路</a></li></ul></li><li><a href="#q2--------">Q2 小红的链表破裂</a><ul><li><a href="#----">题目描述</a></li><li><a href="#--1">示例1</a></li><li><a href="#----">解题思路</a></li></ul></li><li><a href="#q3-------">Q3 小红的连通图</a><ul><li><a href="#----">题目描述</a></li><li><a href="#----">输入描述</a></li><li><a href="#----">输出描述</a></li><li><a href="#----">解题思路</a></li></ul></li><li><a href="#q4--------">Q4 小红的数组分割</a><ul><li><a href="#----">题目内容</a></li><li><a href="#----">输入描述</a></li><li><a href="#----">输出描述</a></li><li><a href="#--1">示例1</a></li><li><a href="#-----">解题思路：</a></li></ul></li><li><a href="#q5----tencent--">Q5 小红的tencent矩阵</a><ul><li><a href="#----">题目描述</a></li><li><a href="#----">输入描述</a></li><li><a href="#----">输出描述</a></li><li><a href="#--1">示例1</a></li><li><a href="#----">解题思路</a></li></ul></li></ul><!-- tocstop --><h1 id="q1-小红的图上染色">Q1 小红的图上染色</h1><h2 id="题目描述">题目描述</h2><p>小红拿到了一个无向图，其中一些边被染成了红色，小红定义一个点为”好点“，当且仅当这个点的所有邻边都是红边。现在请你求出这个无向图”好点“的数量</p><p>注意：如果一个节点没有任何邻边，那么它也是好点</p><h2 id="输入描述">输入描述</h2><p>第一行输入两个正整数<span class="math inline">\(m\)</span>,<spanclass="math inline">\(n\)</span>，代表节点的数量和边的数量。</p><p>接下来的m行，每行输入两个正整数<spanclass="math inline">\(u\)</span>, <spanclass="math inline">\(v\)</span>和一个字符chr，代表节点u和v有一条边连接，如果chr为'R'，代表这条边被染红；'W'代表未被染色</p><p><span class="math inline">\(1 &lt;= n, m &lt;= 10^5\)</span></p><p><span class="math inline">\(1 &lt;= u, v &lt;= n\)</span></p><h2 id="输出描述">输出描述</h2><p>一个整数，代表“好点”的数量</p><h2 id="示例1">示例1</h2><p>输入 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 4</span><br><span class="line">1 2 R</span><br><span class="line">2 3 W</span><br><span class="line">3 4 W</span><br><span class="line">1 4 R</span><br></pre></td></tr></table></figure></p><p>输出 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure></p><p>说明： 只有1号节点是好点</p><h2 id="解题思路">解题思路</h2><p>无向图使用邻接表构建出邻接表，再构建一个node的hashmap储存红边数量，最后判断邻接表长度是否等于红边数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># edge: [[&quot;1&quot;, &quot;2&quot;, &quot;R&quot;], [&quot;2&quot;, &quot;3&quot;, &quot;W&quot;], [&quot;3&quot;, &quot;4&quot;, &quot;W&quot;], [&quot;1&quot;, &quot;4&quot;, &quot;R&quot;]]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_graph_and_red_edges</span>(<span class="params">edges: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>):</span><br><span class="line">    <span class="comment"># 用于储存图</span></span><br><span class="line">    graph = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">    <span class="comment"># 用于储存一个node的红边数量</span></span><br><span class="line">    red = defaultdict(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u, v, color <span class="keyword">in</span> edges:</span><br><span class="line">        graph[<span class="built_in">int</span>(u)].append(v)</span><br><span class="line">        graph[<span class="built_in">int</span>(v)].append(u)</span><br><span class="line">        <span class="keyword">if</span> color == <span class="string">&quot;R&quot;</span>:</span><br><span class="line">            red[<span class="built_in">int</span>(u)] += <span class="number">1</span></span><br><span class="line">            red[<span class="built_in">int</span>(v)] += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> graph, red</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_good_nodes</span>(<span class="params">graph, red, n</span>):</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(graph[node]) == red[node]:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="q2-小红的链表破裂">Q2 小红的链表破裂</h1><h2 id="题目描述-1">题目描述</h2><p>小红拿到了一个链表。她准备将这个链表断裂成两个链表，再拼接到一起，使得链表从头节点到尾部升序。你能帮小红判断是否达成目的吗？</p><p>给定的为一个链表数组，你需要对于数组中每个链表进行一次“是”或“否”的回答，并返回布尔数组。</p><p>每个链表的长度不小于2，且每个链表中不包含两个相等的元素。所有链表的长度之和保证不超过<spanclass="math inline">\(10^5\)</span></p><h2 id="示例1-1">示例1</h2><p>输入： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;1, 2, 3&#125;, &#123;2, 3, 1&#125;, &#123;3, 2, 1&#125;]</span><br></pre></td></tr></table></figure></p><p>输出： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[true, false, true]</span><br></pre></td></tr></table></figure></p><p>说明：</p><p>第三个链表无论怎么操作都不满足条件</p><h2 id="解题思路-1">解题思路</h2><p>只有三种情况：</p><ol type="1"><li>升序</li><li>先升序后降序</li><li>先降序后升序</li></ol><p>才能满足断裂后拼接在一起时满足升序的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_sorted_linked_lists</span>(<span class="params">arr</span>):</span><br><span class="line">    results = []</span><br><span class="line">    <span class="comment"># 由于我不知道原题的输入长什么样</span></span><br><span class="line">    <span class="comment"># 暂且按照数组来进行代码处理</span></span><br><span class="line">    <span class="keyword">for</span> lst <span class="keyword">in</span> arr:</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 找到链表(数组)中的最大值和最小值的位置</span></span><br><span class="line">        min_index = lst.index(<span class="built_in">min</span>(lst))</span><br><span class="line">        max_index = lst.index(<span class="built_in">max</span>(lst))</span><br><span class="line">        <span class="comment"># 判断三种情况</span></span><br><span class="line">        <span class="comment"># 1. 升序</span></span><br><span class="line">        <span class="comment"># 2. 先升序后降序</span></span><br><span class="line">        <span class="comment"># 3. 先降序后升序</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sorted</span>(lst[:min_index+<span class="number">1</span>]) == lst[:min_index+<span class="number">1</span>] <span class="keyword">and</span> <span class="built_in">sorted</span>(lst[max_index:]) == lst[max_index:]:</span><br><span class="line">            results.append(<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            results.append(<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure><h1 id="q3-小红的连通图">Q3 小红的连通图</h1><h2 id="题目描述-2">题目描述</h2><p>小红拿到了一个有n个节点的无向图，这个图初始并不是连通图。</p><p>现在小红想知道，添加恰好一条边使得这个图连通，有多少种不同的加边方案？</p><h2 id="输入描述-1">输入描述</h2><p>第一行输入两个正整数<span class="math inline">\(n\)</span>, <spanclass="math inline">\(m\)</span>，用空格隔开。</p><p>接下来的m行，每行输入两个正整数<spanclass="math inline">\(u\)</span>, <spanclass="math inline">\(v\)</span>，代表节点u和节点v之间有一条边连接。</p><p><span class="math inline">\(1 &lt;= n, m &lt;= 10^5\)</span> <spanclass="math inline">\(1 &lt;= u, v &lt;= n\)</span></p><p>保证给出的图示不连通的。</p><h2 id="输出描述-1">输出描述</h2><p>一个整数，代表加边的方案数</p><h2 id="解题思路-2">解题思路</h2><p>我不会，让我想想...</p><h1 id="q4-小红的数组分割">Q4 小红的数组分割</h1><h2 id="题目内容">题目内容</h2><p>小红拿到了一个数组，她准备将数组分成k段，使得每段内部按位异或之后，再全部求和，小红希望最终这个和尽可能大，你能帮帮她吗（不能）</p><h2 id="输入描述-2">输入描述</h2><p>输入包含两行，第一行两个正整数<span class="math inline">\(n\)</span>,<span class="math inline">\(k\)</span>，<span class="math inline">\(1&lt;= k &lt;= n &lt;= 400\)</span>，分别表示数组的长度和要分的段数。</p><p>第二行<span class="math inline">\(n\)</span>个整数<spanclass="math inline">\(a_i\)</span> (<span class="math inline">\(0 &lt;=a_i &lt;= 10^9\)</span>)，表示数组a的元素。</p><h2 id="输出描述-2">输出描述</h2><p>输出一个正整数，表示最终的最大和</p><h2 id="示例1-2">示例1</h2><p>输入： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 2</span><br><span class="line">1 1 1 2 3 4</span><br></pre></td></tr></table></figure> 输出： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure> 解释说明：</p><p>小红将数组分为了[1, 4], [5, 6]两个区间，得分分别为：<spanclass="math inline">\(1 \oplus 1 \oplus 1 \oplus 2 = 3\)</span> 和 <spanclass="math inline">\(3 \oplus 4 =7\)</span>，总得分为10。可以证明不存在比10更优的分割方案。</p><h2 id="解题思路-3">解题思路：</h2><ol type="1"><li>采用动态规划的方法，用dptable记录当前位置将数组分成若干段的最大异或和，我们尝试所有可能的分段方法，更新dptable以找到最大的异或和。</li><li>利用异或运算的逆运算是其本身，可以使用异或前缀和的方法快速计算任何一段异或和</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max_xor</span>(<span class="params">nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="comment"># acquire the length of the array</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># calculate pre-sum of xor</span></span><br><span class="line">    pre_sum_xor = [<span class="number">0</span>] * n</span><br><span class="line">    pre_sum_xor[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        pre_sum_xor[i] = pre_sum_xor[i-<span class="number">1</span>] ^ nums[i]</span><br><span class="line"></span><br><span class="line">    dp = [[<span class="number">0</span>] * (k+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># dp[i][j] 表示index为i的元素分成j段的最大异或和</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k+<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 只有一段的时候，直接计算从头到当前位置的异或和</span></span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">1</span>:</span><br><span class="line">                dp[i][j] = pre_sum_xor[i]</span><br><span class="line">            <span class="comment"># 多于一段的时候</span></span><br><span class="line">            <span class="comment"># 最大值 = ”前段异或和 + 前面部分“ 与 ”当前“ 最大值</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 尝试不同的分段点</span></span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(j, i):</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[m][j-<span class="number">1</span>] + (pre_sum_xor[i] ^ pre_sum_xor[m]))</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> dp[n-<span class="number">1</span>][k];</span><br></pre></td></tr></table></figure><h1 id="q5-小红的tencent矩阵">Q5 小红的tencent矩阵</h1><h2 id="题目描述-3">题目描述</h2><p>小红拿到了一个字符矩阵，她可以从任意一个地点除法，希望走6步之后恰好形成“tencent”字符串，小红想知道，共有多少种不同的行走方案？</p><p>注意：每一步可以选择上，下，左，右任意一种方向行走，不可行走到矩阵外部。</p><h2 id="输入描述-3">输入描述</h2><p>第一行输入两个正整数<span class="math inline">\(n\)</span>, <spanclass="math inline">\(m\)</span>，代表矩阵的行数和列数。</p><p>接下来的n行，每行输入一个长度为m，仅由小写字母组成的字符串，代表小红拿到的矩阵。</p><h2 id="输出描述-3">输出描述</h2><p>一个整数，代表最终合法的方案数</p><h2 id="示例1-3">示例1</h2><p>输入： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">ten</span><br><span class="line">nec</span><br><span class="line">ten</span><br></pre></td></tr></table></figure></p><p>输出： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></p><p>说明：</p><ol type="1"><li>从左上角出发，右右下左左上</li><li>从左上角出发，右右下左左下</li><li>从左下角出发，右右上左左下</li><li>从左下角出发，右右上左左上</li></ol><h2 id="解题思路-4">解题思路</h2><p>dfs + 剪枝，符合加1，不符合直接返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_matrix</span>(<span class="params">matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>):</span><br><span class="line">    n, m = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">    expect = [<span class="string">&quot;t&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;t&quot;</span>]</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i: <span class="built_in">int</span>, j: <span class="built_in">int</span>, count: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= n <span class="keyword">or</span> j &gt;= m:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> count &gt;= <span class="built_in">len</span>(expect) <span class="keyword">or</span> matrix[i][j] != expect[count]:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> count == <span class="built_in">len</span>(expect)-<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">nonlocal</span> res</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        dfs(i+<span class="number">1</span>, j, count+<span class="number">1</span>)</span><br><span class="line">        dfs(i-<span class="number">1</span>, j, count+<span class="number">1</span>)</span><br><span class="line">        dfs(i, j+<span class="number">1</span>, count+<span class="number">1</span>)</span><br><span class="line">        dfs(i, j-<span class="number">1</span>, count+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            dfs(i, j, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">2024年3月31日20:00-22:00实习生在线笔试</summary>
    
    
    
    <category term="OA" scheme="https://jerry20000730.github.io/categories/OA/"/>
    
    
    <category term="Tencent" scheme="https://jerry20000730.github.io/tags/Tencent/"/>
    
  </entry>
  
  <entry>
    <title>Git: How to do pre-commit</title>
    <link href="https://jerry20000730.github.io/wiki/Git/git_tip1/"/>
    <id>https://jerry20000730.github.io/wiki/Git/git_tip1/</id>
    <published>2024-02-14T22:47:40.000Z</published>
    <updated>2024-02-14T22:47:40.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#step1--find-git-hooks">STEP1: Find .git/hooks</a></li><li><a href="#step2--create--pre-commit--file">STEP2: Create<code>pre-commit</code> file</a></li><li><a href="#step3--edit--pre-commit--file">STEP3: edit<code>pre-commit</code> file</a></li></ul><!-- tocstop --><h2 id="step1-find-.githooks">STEP1: Find .git/hooks</h2><p>Find the hooks folder in the (hidden) .git configuration folder<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd .git/hooks</span><br></pre></td></tr></table></figure></p><h2 id="step2-create-pre-commit-file">STEP2: Create<code>pre-commit</code> file</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch pre-commit</span><br></pre></td></tr></table></figure><h2 id="step3-edit-pre-commit-file">STEP3: edit <code>pre-commit</code>file</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi pre-commit</span><br></pre></td></tr></table></figure><p>and add something like this:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">store the top level git repository path</span></span><br><span class="line">root_directory=$(git rev-parse --show-toplevel)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">list all subdirectories</span></span><br><span class="line">subdirectories=(&quot;HW1&quot;, &quot;HW2&quot;, &quot;HW3&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">iterate over each subdirectory</span></span><br><span class="line">for subdir in &quot;$(subdirectories[@])&quot;;</span><br><span class="line">do</span><br><span class="line">    (cd &quot;$root_directory/$subdir&quot; &amp;&amp; make clean)</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Continue with the commit</span></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p>Now whenever you commit, it will automatically clean the subdirectoryand will not commit any executable files. Note, if the operating systemchanges, the script will also need to change.</p>]]></content>
    
    
    <summary type="html">Whenever I want to commit, I always commit the object file created by C++ to the github server. This cannot be simply specified by the .gitignore file, a better way is to specify this in the pre-commit file</summary>
    
    
    
    <category term="Git" scheme="https://jerry20000730.github.io/categories/Git/"/>
    
    
    <category term="git" scheme="https://jerry20000730.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>COMP3052 Computer Security 4 -- Access Control</title>
    <link href="https://jerry20000730.github.io/wiki/Lecture%20Note/COMP3052%20Computer%20Security/CS6/"/>
    <id>https://jerry20000730.github.io/wiki/Lecture%20Note/COMP3052%20Computer%20Security/CS6/</id>
    <published>2024-02-13T02:00:39.000Z</published>
    <updated>2024-02-13T02:00:39.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><ahref="#-font-color---ff0000----important----font--background"><font color="#FF0000">[IMPORTANT]</font>Background</a></li><li><ahref="#difference-between-authentication-and-access-control-">Differencebetween authentication and access control:</a></li><li><ahref="#access-control-has-two-steps---authentication---authorisation">Accesscontrol has two steps - Authentication &amp; Authorisation</a></li><li><a href="#principal-vs-subject-vs-object">Principal vs Subject vsObject</a></li><li><a href="#access-operations">Access Operations</a><ul><li><ahref="#-font-color---ff0000----important----font--access-control-structures"><font color="#FF0000">[IMPORTANT]</font>Access Control Structures</a></li></ul></li><li><a href="#intermediate-controls">Intermediate Controls</a><ul><li><a href="#groups">Groups</a></li><li><a href="#negative-permission">Negative Permission</a></li><li><a href="#privileges">Privileges</a></li><li><a href="#robe-based-access-control--rbac-">Robe-based AccessControl (RBAC)</a></li><li><a href="#protection-rings">Protection Rings</a></li></ul></li><li><a href="#comparing-security-attributes">Comparing SecurityAttributes</a><ul><li><a href="#partial-ordering">Partial Ordering</a></li><li><a href="#multi-level-security">Multi-Level Security</a></li><li><a href="#lattice">Lattice</a></li><li><a href="#others">Others</a></li></ul></li></ul><!-- tocstop --><h2 id="important-background"><font color="#FF0000">[IMPORTANT]</font>Background</h2><p>To discuss access control, we first have to develop a suitableterminology. The very nature of 'access' suggests that:</p><ul><li>There is an active entity - a <em><strong>subject</strong></em> or<em><strong>principal</strong></em></li><li>Accessing a passive <em><strong>object</strong></em> with somespecific <em><strong>access operation</strong></em></li><li>While a <em><strong>reference monitor</strong></em> grants or deniesaccess</li></ul><figure><img src="/images/CS/Part4/authen_author.png"alt="Fundamental Model of Access Control" /><figcaption aria-hidden="true">Fundamental Model of AccessControl</figcaption></figure><h2 id="difference-between-authentication-and-access-control">Differencebetween authentication and access control:</h2><ul><li>Authentication verify identity</li><li>Access control stipulates who can or cannot access certainresources</li></ul><h2id="access-control-has-two-steps---authentication-authorisation">Accesscontrol has two steps - Authentication &amp; Authorisation</h2><ul><li>Authentication<ul><li>Decide who has access to the system</li></ul></li><li>Authorisation<ul><li>of those with access, who is authorised to do something to theresource (object)</li></ul></li></ul><h2 id="principal-vs-subject-vs-object">Principal vs Subject vsObject</h2><ul><li><strong>Principal</strong>: An entity that can be granted access toobjetcs or can make statements affecting access control decisions<ul><li>user identity in an OS, used when discussing security policies</li></ul></li><li><strong>Subject</strong>: An active entity within an IT system(active party)<ul><li>process running under a user identity, used when discussingoperational system enforcing policies.</li></ul></li><li><strong>Object</strong>: Files or resources (passive party)</li></ul><h2 id="access-operations">Access Operations</h2><ul><li>Access Mode<ul><li>Observe: look at the contents of an object</li><li>Alter: change the contents of an object</li></ul></li><li>General Model on common access on files:<ul><li>Read (concern: confidentiality)</li><li>Write (concern: integrity)</li><li>Execute</li></ul></li><li>Ownership (in charge of setting security policies)<ul><li>Owner can be defined for each resource, owner controls who getsaccess</li><li>Or the security policy is a system-wide mandatory policy</li></ul></li></ul><h3id="important-access-control-structures"><font color="#FF0000">[IMPORTANT]</font>Access Control Structures</h3><ol type="1"><li>Access Control Matrix (ACM) <img src="/images/CS/Part4/acm.png"alt="Access control matrix" /></li></ol><p>At a basic level, access rights can be defined individually for eachcombination of subject and object simply and object simply in the formof a table. The access control matrix is an <strong>abstract</strong>concept and not very suitable for direct implementation if the number ofsubjects and objects is large or if the sets of subjects and objectchange frequently.</p><ol start="2" type="1"><li>Capabilities <img src="/images/CS/Part4/capability.png"alt="Capability" /></li></ol><p>There are two fundamental options for implementing an access controlmatrix. Access rights can be kept with the subjects or with the objects.In the first case, every subject is given a <em>capability</em>, anunforgeable(不可伪造的) token that specifies this subject's accessrights. This capability corresponds to the subject's row in the accesscontrol matrix</p><p><strong>Disadvantage</strong></p><ul><li>It is difficult to get an overview of who has permission to access agiven object</li><li>It is difficult to revoke(撤销) a capability - either the operatingsystem has to be given the task or users have to keep track of all thecapabilities they have passed on</li></ul><ol start="3" type="1"><li>Access Control Lists (ACL) <img src="/images/CS/Part4/acl.png"alt="Access control list" /></li></ol><ul><li>Less memory used<ul><li>Stored with a file and quick to access</li><li>but:<ul><li>management of individual subjects is cumbersome</li><li>obtaining an overview of permissions is challenging</li><li>tedious to set this up for every subjects and objects</li></ul></li><li>UNIX simplifies the ACL structure: User/Group/others</li><li>Windows extends usual rwe with:<ul><li>take ownership</li><li>change permission</li><li>delete</li></ul></li></ul></li></ul><h2 id="intermediate-controls">Intermediate Controls</h2><p>Problems of complexity are solved by indirection. This principle canbe applied to access control. Intermediate layers between users andobjects are introduced to represent policies in a more manageablefasion.</p><h3 id="groups">Groups</h3><p><img src="/images/CS/Part4/group.png" alt="Groups" /> Users withsimilar access rights are collected in groups and groups are givenpermissions to access objects, and are thus a mean of simplifying thedefinition of access control policies.</p><h3 id="negative-permission">Negative Permission</h3><p><img src="/images/CS/Part4/negative_permission.png"alt="Negative Permission" /> an entry in an access control structurethat specifies the access operations a user is not allowed toperform.</p><p><strong>Policy Conflict</strong></p><p>In the above image, the negative permission given to<strong>u3</strong> contradicting the positive permission given to group<strong>g1</strong>, and thus an example of policy conflict.</p><ul><li>Can be resolved by reference monitor<ul><li>e.g., a simple and widely used algorithm is just process the firstentry matching in ACL(Access Control Lists) and ignore the laterentries</li></ul></li></ul><h3 id="privileges">Privileges</h3><figure><img src="/images/CS/Part4/privileges.png" alt="Privileges" /><figcaption aria-hidden="true">Privileges</figcaption></figure><p>A policy could refer to the operationss a user is allowed to execute.<em>Privilege</em> stands for the right to execute certainoperations</p><ul><li>Usually associating with operating system functions</li></ul><h3 id="robe-based-access-control-rbac">Robe-based Access Control(RBAC)</h3><p>Compared with ACL: Identity-based Access Control (IBAC)</p><ul><li>Access is based on a role, e.g. accountants should access certainfinancial files<ul><li>role -&gt; collection of application specific operations or resourceaccess<ul><li>Difference with group and role:<ul><li>group are collections of users</li><li>roles are collections of permissions</li></ul></li></ul></li><li>RBAC focuses on users and the jobs they perform</li><li>Easier to scale and applicable to large networks and organizations(enterprise level)</li><li>Most operating systems are user/group based, so role-based accesscan be provided using nested groups<img src="/images/CS/Part4/rbac.png"alt="rbac within groups" /></li></ul></li></ul><h3 id="protection-rings">Protection Rings</h3><figure><img src="/images/CS/Part4/protection_ring.png"alt="protection rings" /><figcaption aria-hidden="true">protection rings</figcaption></figure><p>Protection rings are a particularly simple example of an intermediatelayer of hardware-based access control for subjects and objects. Eachsubject (process) and each object is assigned a number, depending on its'importance'.</p><p>Access control decisions are made by comparing the subject's andobject's numbers</p><h2 id="comparing-security-attributes">Comparing SecurityAttributes</h2><p>When evaluating a security policy, he reference monitor compares theaccess rights granted to the subject with the access rights demanded bythe policy.</p><h3 id="partial-ordering">Partial Ordering</h3><p>A security policy might grant access to an object if the object labelis <span class="math inline">\(\le\)</span> subject label</p><p><img src="/images/CS/Part4/partial_ordering.png" /></p><p>Considering the above example, the department creates a group<em>Year_1</em> for first year students to manage access for resourcesspecifically dedicated to them. There is also a group <em>Year_2</em>for second year students, <em>Year_3</em> for third year students, etc.The group of first year students would be contained in the group of allstudents, but there is no such relation between group <em>Year_1</em>and <em>Year_2</em>. By using <strong><em>Hasse diagrams</em></strong>(a graphical representation of partially ordered sets in the aboveimage), the edges in the diagram give a seleton of the partial ordering,which is <span class="math inline">\(a \le b\)</span> if and only ifthere a path from a to be.</p><p>In this case, <span class="math inline">\(\{Year\_1\} \le \{Year\_1,Year\_2\}\)</span>, and a security policy might grant access to anobject if the object label is <span class="math inline">\(\le\)</span>subject label.</p><h3 id="multi-level-security">Multi-Level Security</h3><figure><img src="/images/CS/Part4/multi-level-security.png"alt="multi-level security" /><figcaption aria-hidden="true">multi-level security</figcaption></figure><p>Linearly ordered hierarchy of four security levels in early securityresearch in 1970s and 1980s: often in military applications.</p><h3 id="lattice">Lattice</h3><p>The linear ordering of security levels in Multi-Layer security canonly express a limited security policies, while in order to be able tostate other policies, such as people at level <em>secret</em> could haveaccess to lower categories, a <strong>lattice</strong> of securitylevels was introduced.</p><figure><img src="/images/CS/Part4/lattice.png" alt="Lattice" /><figcaption aria-hidden="true">Lattice</figcaption></figure><h3 id="others">Others</h3><ol type="1"><li>JVM: sandboxing - run code in restricted environments</li><li>Virtualization - emulates a number of other machines</li><li>Trusted computing - verifiable state of software and hardware</li></ol>]]></content>
    
    
    <summary type="html">Access control is a security technique that regulates who or what can view or use resources in a computing environment</summary>
    
    
    
    <category term="COMP3052 Computer Security" scheme="https://jerry20000730.github.io/categories/COMP3052-Computer-Security/"/>
    
    
    <category term="COMP3052 Computer Security" scheme="https://jerry20000730.github.io/tags/COMP3052-Computer-Security/"/>
    
  </entry>
  
  <entry>
    <title>Tips when defining global constant in header file</title>
    <link href="https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/C++/const/"/>
    <id>https://jerry20000730.github.io/wiki/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/C++/const/</id>
    <published>2024-02-12T06:03:33.000Z</published>
    <updated>2024-02-12T06:03:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="options-of-defining-global-constant-in-header-file">Options ofdefining global constant in header file</h2><ol type="1"><li><code>#define GLOBAL_CONST_VAR 0xFF</code></li><li><code>const int GLOBAL_CONST_VAR = 0xFF;</code></li><li><code>extern const int GLOBAL_CONST_VAR;</code> and in one sourcefile uses <code>cosnt int GLOBAL_CONST_VAR = 0xFF;</code></li></ol><p>According to <em>Effective C++</em>, ITEM 2:</p><blockquote><p>Prefer <code>const</code>, <code>enum</code>, and <code>inline</code>to <code>#define</code>.</p></blockquote><p>So option 1 is not preferred (which I particularly like to use). Inmy project, I have a header file that uses three constant string.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util.hpp</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * CLIENT_CONNECT_CONFIRM = <span class="string">&quot;CLIENT_CONFIRM&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * SERVER_CONNECT_CONFIRM = <span class="string">&quot;SERVER_CONFIRM&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * PLAYER_CONNECT_CONFIRM = <span class="string">&quot;PLAYER_CONFIRM&quot;</span>;</span><br></pre></td></tr></table></figure><p>However, when I run the makefile, it has the error goes like:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ld: player.o:/home/fg96/ECE650/HW3/util.hpp:14: multiple definition of `CLIENT_CONNECT_CONFIRM&#x27;; util.o:/home/fg96/ECE650/HW3/util.hpp:14: first defined here</span><br></pre></td></tr></table></figure><p>Which clearly indicates that the <code>CLIENT_CONNECT_CONFIRM</code>are regarded not as the constant, but variable, but why? Reason is that<code>const char * ...</code> is not constant, because<code>const char *</code> means that the value pointer points to cannotchange, but the value of the pointer can change (very sillymistake).</p><p>The following definition will be just fine:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// all const pointers pointing to const values</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> CLIENT_CONNECT_CONFIRM = <span class="string">&quot;CLIENT_CONFIRM&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> SERVER_CONNECT_CONFIRM = <span class="string">&quot;SERVER_CONFIRM&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> PLAYER_CONNECT_CONFIRM = <span class="string">&quot;PLAYER_CONFIRM&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const pointers is also fine</span></span><br><span class="line"><span class="type">char</span> * <span class="type">const</span> CLIENT_CONNECT_CONFIRM = <span class="string">&quot;CLIENT_CONFIRM&quot;</span>;</span><br><span class="line"><span class="type">char</span> * <span class="type">const</span> SERVER_CONNECT_CONFIRM = <span class="string">&quot;SERVER_CONFIRM&quot;</span>;</span><br><span class="line"><span class="type">char</span> * <span class="type">const</span> PLAYER_CONNECT_CONFIRM = <span class="string">&quot;PLAYER_CONFIRM&quot;</span>;</span><br></pre></td></tr></table></figure><p>Since C++17, <code>inline</code> specifier can also be used onvariable. According to the cppreference:</p><blockquote><p>An inline function or variable(since C++17) with external linkage(e.g. not declared static) has the following additional properties:There may be <strong>more than one definition</strong> of an inlinefunction or variable(since C++17) in the program as long as eachdefinition appears in a different translation unit and (for non-staticinline functions and variables(since C++17)) all definitions areidentical. For example, an inline function or an inline variable(sinceC++17) may be defined in a header file that is <strong>included inmultiple source files</strong>.</p></blockquote><p>But we are not allowed to use c++17 so ...</p><p>Another possibility would be to use namespace <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="type">char</span> * CLIENT_CONNECT_CONFIRM = <span class="string">&quot;CLIENT_CINFIRM&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="reference">Reference</h2><ol type="1"><li><ahref="https://stackoverflow.com/questions/2268749/defining-global-constant-in-c">Definingglobal constant in C++</a></li><li><ahref="https://blog.csdn.net/ace_fei/article/details/8587403">头文件中定义const全局变量应注意的问题</a></li></ol>]]></content>
    
    
    <summary type="html">Defining a constant in C++ to be visible in several source files. There are several ways of doing that, but you could make mistakes if not careful enough.</summary>
    
    
    
    <category term="Programming Languages" scheme="https://jerry20000730.github.io/categories/Programming-Languages/"/>
    
    
    <category term="C++" scheme="https://jerry20000730.github.io/tags/C/"/>
    
  </entry>
  
</feed>
